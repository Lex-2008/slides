#!/var/cfengine/bin/cf-agent -f-
bundle agent manage_ssh
{
  meta:
    "tags" slist => { "autorun" };

  methods:
    "SSH Config Data"
      usebundle => ssh_config;

    "Manage SSH Config"
      usebundle => ssh_config_manage_kv("ssh_config.data");
}

bundle agent ssh_config
{
  vars:
      "data[PermitRootLogin]" string => "no";
      "data[Protocol]" string => "2";
      "data[Port]" string => "22";

    DEBUG|DEBUG_ssh_config::
      "keys" slist => getindices(data);

  reports:
    DEBUG|DEBUG_ssh_config::
      "DEBUG $(this.bundle): $(keys) = '$(data[$(keys)])'";
}

bundle agent ssh_config_manage_kv(data)
{
  vars:
    "config" string => "/etc/ssh/sshd_config";

  files:
    "$(config)"
      handle => "ssh_config_manage_kv_entries",
      edit_line => set_line_based("$(data)", " ", "\s+", ".*", "\s*#\s*"),
      classes => scoped_classes_generic("bundle", "sshd_config");

  classes:
    sshd_config_repaired::
      "config_valid"
        expression => returnszero("/usr/sbin/sshd -t -f $(config)", noshell),
        comment => "It's important that we don't restart the service with a
                    broken config, or the service will be down.";

  commands:
    sshd_config_repaired.config_valid::
      "$(paths.service)"
        handle => "ssh_config_manage_kv_restart_after_config_change",
        args => "sshd restart",
        comment => "The service must be restarted in order to pick up new
                    configuration settings.";

  reports:
      "DEBUG $(this.bundle): Reparied configuration"
        if => "sshd_config_repaired";

      "DEBUG $(this.bundle): Configuration Valid"
        if => "config_valid";

      "DEBUG $(this.bundle): Restarted sshd after config change"
        depends_on => { "ssh_config_manage_kv_restart_after_config_change" };
}
bundle agent __main__{methods:"manage_ssh";}
