#+Title: CFEngine in a day
#+Author: Nick Anderson
#+Email: nick.anderson@northern.tech
#+REVEAL_ROOT: reveal.js-3.9.2
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:nil
#+OPTIONS: reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1024 reveal_height:768
#+OPTIONS: toc:nil
#+OPTIONS: tags:nil timestamp:nil
#+OPTIONS: reveal_single_file:nil
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: fade
#+REVEAL_THEME: black
#+REVEAL_TALK_URL: https://htmlpreview.github.io/?https://github.com/nickanderson/cfengine-training/blob/master/slide-deck.html
#+REVEAL_TALK_QR_CODE: does not exist
#+REVEAL_HLEVEL: 1
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="CFEngine in a Day">
#+REVEAL_POSTAMBLE: <p> CFEngine </p>
#+REVEAL_PLUGINS: (markdown notes)
#+PROPERTY: header-args :eval never-export
#+LINK: cfe-promiseType    https://docs.cfengine.com/master/reference-promise-types-%s.html
* Instructions :noexport:
** To get a PDF
- Export as HTML, view with Chromium or Chrome and add =?print-pdf= to the end of the url.
- Print to PDF
- Manually convert to landscape with qpdf
  - ~qpdf ~/PDF/CFEngine_in_a_day__DF.pdf --rotate=+90 slide_deck-dark.pdf~
** Light vs Dark
Dark is best in dimly lit rooms, but light is best for /most/ events. So , always make a light and dark version. Don't forget to set the emacs theme! Since it's used for code highlighting, it matters.

- Light Theme ::
  - =#+REVEAL_THEME: black=

- Dark Themes
  - =#+REVEAL_THEME: black=

#+BEGIN_SRC sh
  ls reveal.js-3.9.2/css/theme
#+END_SRC

#+RESULTS:
| beige.css     |
| black.css     |
| blood.css     |
| league.css    |
| moon.css      |
| night.css     |
| README.md     |
| serif.css     |
| simple.css    |
| sky.css       |
| solarized.css |
| source        |
| template      |
| white.css     |

** Hackarounds
CFEngine src blocks that use macros error when exporting.
#+begin_example
  font-lock-fontify-keywords-region: Symbol’s value as variable is void: font-lock-error-face
#+end_example

This seemed to fix it:

#+BEGIN_SRC elisp
(setq font-lock-error-face 'font-lock-warning-face) 
#+END_SRC

#+RESULTS:
: font-lock-warning-face


* Before we start
:PROPERTIES:
:ID:       27318943-487d-4805-a592-26281f4f5bb2
:reveal_extra_attr: data-timing="120"
:END:
** Schedule
:PROPERTIES:
:ID:       c3399d41-b849-41b7-b113-b6c8bec076a0
:END:

#+CAPTION: A rough schedule (this varies greatly).
| Time                | Activity        |
|---------------------+-----------------|
| 09:00 AM - 10:30 AM | Class           |
| 10:30 AM - 11:00 AM | Morning break   |
| 11:00 AM - 12:30 PM | Class           |
| 12:30 PM - 01:30 PM | Lunch break     |
| 01:30 PM - 03:00 PM | Class           |
| 03:00 PM - 03:30 PM | Afternoon break |
| 03:30 PM - 05:00 PM | Class           |

#+CAPTION: Speaker Notes
#+begin_notes
- Who will volunteer to *remind me of breaks*?
#+end_notes

** Use the source
:PROPERTIES:
:ID:       5be6e6a0-0539-4103-8677-6fafbeef2511
:END:

[[https://github.com/nickanderson/cfengine-training][github.com/nickanderson/cfengine-training]]

#+CAPTION: Speaker Notes
#+begin_notes
See a *mistake*? Please consider submitting a Pull Request.
#+end_notes

** Hi, I'm Nick
:PROPERTIES:
:ID:       a122e01c-8345-44d6-977f-ace81375a540
:END:

- Wife, 2 kids and a dog
- Sysadmin/Infrastructure Engineer/Doer of things
- CFEngineering for >10 years
- Find me online
  - [[mailto:nick@cmdln.org][nick@cmdln.org]] | [[mailto:nick.anderson@cfengine.com][nick.anderson@northern.tech]]
  - [[https://twitter.com/cmdln_][@cmdln_]]
  - [[http://www.cmdln.org][cmdln.org]]
  - [[https://linkedin.com/in/hithisisnick][linkedin.com/in/hithisisnick]]
  - [[https://sks-keyservers.net/pks/lookup?op=get&search=0x9EB3AD425D1CCC11][=9274 E588 E866 A10B 713C  9CCD 9EB3 AD42 5D1C CC11=]]

#+CAPTION: Speaker Notes
#+begin_notes
  I have worked in a wide variety of environments:
  - E-commerce
  - Large Enterprise
  - High Perform acne Computing
  - Usually working closely with developers
#+end_notes
** Who are you?
:PROPERTIES:
:ID:       b0c328e7-2675-48e4-80f4-75003bb0e09b
:END:

- Name
- Role
- Goals for this training

* What this training covers
- What is CFEngine
- High level architecture overview
- Language fundamentals (through CFEngine 3.15.0)
- Examples and Exercises
- Useful tooling and tips
* Why Automation?
:PROPERTIES:
:ID:       4154199e-2aab-4080-99e4-3870373a4327
:END:

#+BEGIN_QUOTE
  Every time someone logs onto a system by hand, they jeopardize everyone's
  understanding of the system. -- Mark Burgess
#+END_QUOTE
* What is CFEngine?
:PROPERTIES:
:ID:       3b1b50d5-c41a-49d7-9af4-5c65963a957e
:END:

- Modern
- Secure
- Scalable
- Agile *infrastructure automation tool*

#+CAPTION: Speaker Notes
#+begin_notes
  Designed to enable continuous operations using a distributed model based approach.

  - Modern :: Understands complex data structures (JSON, YAML, CSV).
#+end_notes

** History
- Written by [[https://en.wikipedia.org/wiki/Mark_Burgess_(computer_scientist)][Mark Burgess]]
- Originally released in 1993.
- [[http://people.scs.carleton.ca/~soma/biosec/readings/burgess-immunology.pdf][Computer Immunology]] (Self Healing) 1998
- CFEngine 2 (1998)
- [[http://download.springer.com/static/pdf/884/chp%25253A10.1007%25252F11568285_9.pdf][Promise Theory]] (2005)
- CFEngine 3 (2008)
- Company Founded (2008)
- CFEngine 3.15 (2019)

#+CAPTION: Speaker Notes
#+begin_notes
  - Wait, it's been around since 1993, what makes it /modern/? :: Understands complex data structures (JSON, YAML, CSV).
#+end_notes
** Small
:PROPERTIES:
:ID:       a6f4338f-6820-4047-b286-ee33ca152158
:END:

As of Feb 2020:

- [[https://lgtm.com/projects/g/cfengine/core/context:cpp][Lines of code]] ~ 115k
- ~ 6M Package size
- Memory Utilization: ~ 80MB
  - cf-agent ~ 30MB
  - cf-serverd ~ 30MB
  - cf-execd ~10MB
  - cf-monitord ~ 10MB

** Secure
:PROPERTIES:
:ID:       8576f075-ad2b-494d-9b08-c5f1c1561031
:END:

A good track record.

- http://web.nvd.nist.gov/view/vuln/search

** Portable                                                         :ATTACH:
:PROPERTIES:
:ID:       4d85802b-4bd6-4473-be8c-4add03fa9c6c
:Attachments: laser-cutting_2016-10-15_14-46-28.jpg waratah-trains_2016-10-15_14-55-13.jpg rover-deploy-2_2016-10-15_15-07-51.jpg server-farm-shot_2016-10-15_15-08-07.jpg raspberry_pi_b_2_0_0_2016-10-15_15-09-16.jpg Where%20CFEngine%20Runs_2016-10-15_15-18-02.png Where%20CFEngine%20Runs_2016-10-15_15-18-26.png Where_CFEngine_Runs_2016-10-15_15-20-42.png
:END:

Known to run on many platforms, and interesting places.

#+DOWNLOADED: file:///home/nickanderson/Downloads/Where_CFEngine_Runs.png @ 2016-10-15 15:20:42
#+ATTR_HTML: :width 600
[[file:data/4d/85802b-4bd6-4473-be8c-4add03fa9c6c/Where_CFEngine_Runs_2016-10-15_15-20-42.png]]

#+CAPTION: Speaker Notes
#+begin_notes
- Platforms: Linux, HPUX, Solaris (sparc/x86), AIX, Windows, Android,
- Largest known plant is ~1M nodes
- Smart infrastructure (interactive bus signs in France)
  * Interactive Bus Signs in France
  * Automated payment system collections
- Lasers (that make puppets)
  * From Hallway track at LISA 2013
- Dialysis Machines (over 50% of machines in the US)
  * From user report
- Appliances
  - Ezuce sipXecs (Voip), [[https://sipfoundry.atlassian.net/wiki/display/sipXecs/cfengine+tips][Blog Post]]
  - StashNode Pro, [[https://github.com/Cryptoo/cfengine][Cryptoo]]
    - DMZ
    - Tor
    - Bitcoin
    - Bittorrent
#+end_notes

** Resilient & Autonomous                                           :ATTACH:
:PROPERTIES:
:ID:       2981a0e7-5430-44bd-84b3-32928fbdeea1
:Attachments: flesh_wound_2016-10-15_15-24-06.jpg
:END:

#+DOWNLOADED: https://hbr.org/resources/images/article_assets/2015/01/JAN15_05_179787493.jpg @ 2020-02-18 11:16:51
#+ATTR_HTML: :width 800
[[file:data/29/81a0e7-5430-44bd-84b3-32928fbdeea1/2020-02-18_11-16-51_JAN15_05_179787493.jpg]]

- Policy cached locally
- Decisions made locally
- Actions taken locally
- Convergence, repair what you can and revisit soon

#+CAPTION: Speaker Notes
#+begin_notes
  - Rely on others as little as possible
  - Failures don't block by default
  - Run frequently
    - Who's written a script?
    - When it's time to execute that script 6 months later, what do you do?
#+end_notes
** Declarative                                                      :ATTACH:
:PROPERTIES:
:ID:       a6e60c34-5641-48b6-913b-85e54fa9effd
:Attachments: declarative_vs_imperative_crop_2016-10-15_15-28-37.png
:END:

Focus on the *desired end state*

#+CAPTION: Speaker Notes
#+BEGIN_NOTES
- The GOAL
- Align with business priorities
#+END_NOTES

#+REVEAL: split

#+DOWNLOADED: http://lh6.ggpht.com/_dIvFa14S0yc/Sj0WX0c9kSI/AAAAAAAAG18/qer_Oef9wXY/image%5B8%5D.png @ 2016-10-15 15:28:37
[[file:data/a6/e60c34-5641-48b6-913b-85e54fa9effd/declarative_vs_imperative_crop_2016-10-15_15-28-37.png]]

** Declarative vs Imperative
:PROPERTIES:
:ID:       863dd604-7851-4f02-9134-e0bee2d00d8a
:END:

#+CAPTION: openssh-server should be installed and up to date
#+BEGIN_EXAMPLE
  bundle agent main             | #!/bin/env/bash
  {                             | PKG="openssh-server"
    packages:                   | rpm -q ${PKG} || yum install ${PKG} 
         "openssh-server"       | yum check-update openssh-server
           policy => "present", | if [ $? -eq 100 ]; then
           version => "latest"; |   yum upgrade openssh-server
  }                             | fi 
#+END_EXAMPLE

#+CAPTION: Speaker Notes
#+begin_notes
Goals & Way-points vs Strict Order of operations

It works kind of like a GPS. It doesn't matter where you start, or the wrong
turns you make it will continually re-route to reach the destination. And your
still responsible for driving, the GPS doesn't drive your car (would you trust
it to? (Alaskan airports, ponds, fields, etc ...)
 
http://blog.aggregatedintelligence.com/2009/06/difference-between-imperative-and.html
http://channel9.msdn.com/blogs/pdc2008/tl16
#+end_notes

** Typical use cases
- Any *local* resource/state
  - Manage files, processes, commands
- Security Hardening
- Compliance 
- Application Deployment/Management
- Inventory (with Enterprise)

#+CAPTION: Speaker Notes
#+begin_notes
  - Interesting places:
    - Industrial (lazer cutters, water testing devices)
    - Smart Infrastructure (Trains, Trams, Signs, Grocery Shopper Behaviour)
  - Integrating CFEngine with other services
    - Set environment from ServiceNow CMDB
      - Hub caches information from ServiceNow, provided to agents as structured data
  - Extrememly dynamic policies
    - When production host has deviated from "normal" amount of outbound ssh
      connections kill ssh sessions, firewall host, ticket.
#+end_notes

* Editions
:PROPERTIES:
:ID:       e335ea4b-6720-4d7e-9867-aefacee9797e
:END:
** Community (core)
:PROPERTIES:
:ID:       ef0d1800-194b-4748-a9cb-8bfa83c19a47
:END:

- [[https://github.com/cfengine/core][Github]]
- [[https://cfengine.com/product/community/source-code/][Tarballs]]
- [[https://cfengine.com/product/community/][Binary Packages]]
- [[https://cfengine.com/product/community/cfengine-linux-distros/][Linux Package Repositories]]

#+Caption: Quick Install Community
#+BEGIN_SRC shell
wget -O- http://cfengine.package-repos.s3.amazonaws.com/\
  quickinstall/quick-install-cfengine-community.sh | sudo bash
#+END_SRC

** Enterprise Features
:PROPERTIES:
:ID:       6214cee3-03c7-48c9-840a-6c87fb05a236
:END:

- Dashboard
- Alerts and Triggered Actions
- Inventory Reporting
- Change Reporting
- File Integrity Monitoring
- Measurements
- REST APIs
- SQL Reporting
- Single Pane of Glass Reporting

** Enterprise
:PROPERTIES:
:ID:       2fad1e0b-62b7-4b95-904e-8ac793084aa5
:END:

- [[https://docs.cfengine.com/latest/guide-installation-and-configuration-general-installation-installation-enterprise-vagrant.html][Vagrant Environment]]
- [[http://cfengine.com/product/cfengine-enterprise-free-25/][Binary Packages]]

#+Caption: Quick Install Enterprise
#+BEGIN_SRC shell
wget http://cfengine.package-repos.s3.amazonaws.com/quickinstall/\
quick-install-cfengine-enterprise.sh
sudo bash ./quick-install-cfengine-enterprise.sh <hub|agent>
#+END_SRC

* Client/Server Architecture                                         :ATTACH:
:PROPERTIES:
:ID:       66fd45c5-3f73-49e4-a938-ec3ecbdcd8ef
:Attachments: client_server_architecture_2016-10-15_15-57-49.png
:END:

#+DOWNLOADED: file:///tmp/mozilla_nickanderson0/Client%20Server%20Architecture.png @ 2020-02-18 11:34:56
#+ATTR_HTML: :width 800
[[file:data/66/fd45c5-3f73-49e4-a938-ec3ecbdcd8ef/2020-02-18_11-34-56_ClientServerArchitecture.png]]

** Client Server Communications
:PROPERTIES:
:ID:       a4baabe0-6dda-42b1-9961-678f3bfa5a0c
:END:

- Utilizes port 5308
- Encrypted (TLS)
- Public key authentication
- Agents download policy from hub
- Hub downloads reports from remote agents

#+CAPTION: Speaker Notes
#+begin_notes
  - Policy servers typically bootstrap to themselves
  - SSH-like model (public/private keypair)
  - There is no Certificate Authority that can be compromised
#+end_notes

* Agent Components                                                  :ATTACH:
:PROPERTIES:
:ID:       21633eaf-2b0a-4fef-a25f-7760276b0a5d
:Attachments: cfengine_agent_components_diagram_2016-10-15_16-01-34.png
:END:

** Agent Components
:PROPERTIES:
:ID:       a2500d9e-1b71-4438-9553-daf5e13c226c
:END:


[[file:data/21/633eaf-2b0a-4fef-a25f-7760276b0a5d/cfengine_agent_components_diagram_2016-10-15_16-01-34.png]]

** =cf-hub=                                                          :ATTACH:
:PROPERTIES:
:ID:       98b666a6-d302-47e4-b164-b6653bcca1a8
:Attachments: cfengine_agent_components_diagram_cf-hub_2016-10-15_16-03-31.png
:END:

[[file:data/98/b666a6-d302-47e4-b164-b6653bcca1a8/cfengine_agent_components_diagram_cf-hub_2016-10-15_16-03-31.png]]

#+REVEAL: split

- Collects reports from remote agents
- Obeys "=common control=" and "=hub control=" bodies

#+CAPTION: Speaker Notes
#+begin_notes
  - Runs on the Enterprise Hub, talks to cf-serverd on remote agent on port 5308
  - Collect reports from remote agents
  - Obeys "=common control=" and "=hub control=" bodies
#+end_notes
** =cf-runagent=                                                    :ATTACH:
:PROPERTIES:
:ID:       9c2d7c2f-c5e3-47b2-b7df-fdf875f38643
:Attachments: cfengine_agent_components_diagram_cf-runagent_2016-10-15_21-11-14.png
:END:

[[file:data/9c/2d7c2f-c5e3-47b2-b7df-fdf875f38643/cfengine_agent_components_diagram_cf-runagent_2016-10-15_21-11-14.png]]

#+REVEAL: split

- Requests invocation of cf-agent on remote hosts
- Cannot invoke arbitrary commands
- Define classes to modify behavior (=--define=)
- Specify bundlesequence (=--remote-bundles=)

#+CAPTION: Speaker Notes
#+begin_notes
- Invokes cf-agent on remote hosts
  - Requires established trust 
  - Normally run from server to “ping” the clients
- Normally run on the server to “ping” the clients
- Cannot invoke arbitrary commands - just wake up cf-agent
- Define classes to modify behavior
- Specify bundlesequence (=--remote-bundles= added in 3.10)
#+end_notes

** =cf-serverd=                                                     :ATTACH:
:PROPERTIES:
:ID:       9f5cf6c5-5e00-49f9-8392-5cec4c2bb9ea
:Attachments: cfengine_agent_components_diagram_cf-serverd_2016-10-15_21-16-21.png
:END:

[[file:data/9f/5cf6c5-5e00-49f9-8392-5cec4c2bb9ea/cfengine_agent_components_diagram_cf-serverd_2016-10-15_21-16-21.png]]

#+REVEAL: split

- Listens for connections on *TCP/5308*
- Enforces access control and authentication
- Serves files
- Serves =cf-runagent= requests
- Serves reports to =cf-hub=
- Runs on both server and clients
- Evaluates "=common=" and "=server=" bundles
- Obeys body "=server control="

#+CAPTION: Speaker Notes
#+begin_notes
- Listens for connections on *TCP/5308*
- Enforces access control and authentication
- Serves files
- Serves =cf-runagent= requests
- Serves reports to =cf-hub=
- Runs on both server and clients
- Evaluates "=common=" and "=server=" bundles
- Obeys body "=server control="
#+end_notes

** =cf-key=                                                         :ATTACH:
:PROPERTIES:
:ID:       57b0a68d-ece6-4ffc-81e3-cc84b6009b35
:Attachments: cfengine_agent_components_diagram_cf-key_2016-10-15_21-18-51.png
:END:

[[file:data/57/b0a68d-ece6-4ffc-81e3-cc84b6009b35/cfengine_agent_components_diagram_cf-key_2016-10-15_21-18-51.png]]

#+REVEAL: split

- Show recent connections
- Manage trust of public keys
- Generates key pairs
- Installs Enterprise License

#+CAPTION: Speaker notes
#+begin_notes
- Show recent connections
- Manage trust of public keys
- Generates key pairs
- Installs Enterprise License
#+end_notes

** =cf-promises=                                                    :ATTACH:
:PROPERTIES:
:ID:       52bb3c22-18bf-4c80-82ba-0aad82ea1393
:Attachments: cfengine_agent_components_diagram_cf-promises_2016-10-15_21-21-02.png
:END:

[[file:data/52/bb3c22-18bf-4c80-82ba-0aad82ea1393/cfengine_agent_components_diagram_cf-promises_2016-10-15_21-21-02.png]]

#+REVEAL: split

- Checks Syntax
- Dump Syntax (~cf-promises --syntax-description~
- Tag Policy Releases (~cf-promises --tag-release~)
- Show first order Variables and Classes (~cf-promises --show-vars --show-classes~

#+CAPTION: Speaker notes
#+begin_notes
- Checks Syntax
- Dump Syntax (~cf-promises --syntax-description~
- Tag Policy Releases (~cf-promises --tag-release~)
- Show first order Variables and Classes (~cf-promises --show-vars --show-classes~
#+end_notes

** =cf-monitord=                                                      :ATTACH:
:PROPERTIES:
:ID:       bcd33f08-1c02-4d78-b118-a98bf6986040
:Attachments: cfengine_agent_components_diagram_cf-monitord_2016-10-15_21-22-23.png
:END:

[[file:data/bc/d33f08-1c02-4d78-b118-a98bf6986040/cfengine_agent_components_diagram_cf-monitord_2016-10-15_21-22-23.png]]

#+REVEAL: split

- Measures things
- Defines =mon.*= variables
- Defines classes based on anomaly detection
- Evaluates "=common=" and "=monitor=" bundles
- Obeys "=common control=" and "=monitor control=" bodies

#+CAPTION: Speaker notes
#+begin_notes
- =mon.*= variables record average, last, and deviation
- Anomaly classes =ssh_in_high=, =ssh_out_high_dev3=
- Next .... cf-execd
#+end_notes

** =cf-execd=                                                       :ATTACH:
:PROPERTIES:
:ID:       3c3c8cee-7086-4250-9152-21ca5879c2b2
:Attachments: cfengine_agent_components_diagram_cf-execd_2016-10-15_21-24-05.png
:END:

[[file:data/3c/3c8cee-7086-4250-9152-21ca5879c2b2/cfengine_agent_components_diagram_cf-execd_2016-10-15_21-24-05.png]]

#+REVEAL: split

- Executes =cf-agent= periodically
- Controls period and splay time
- Collects, stores, and sends output
- Evaluates "=common=" bundles
- Obeys "=executor control=" body

#+CAPTION: Speaker notes
#+begin_notes
- splay time is the amount of time an agent waits before actually doing the scheduled execution
- Emails output generated by scheduled command 
- Next ... cf-agent
#+end_notes

** =cf-agent=                                                       :ATTACH:
:PROPERTIES:
:ID:       b49a887f-6963-4b7c-a131-fcd2c0794be0
:Attachments: cfengine_agent_components_diagram_cf-agent_2016-10-15_21-25-11.png
:END:

[[file:data/b4/9a887f-6963-4b7c-a131-fcd2c0794be0/cfengine_agent_components_diagram_cf-agent_2016-10-15_21-25-11.png]]

#+REVEAL: split

- The catalyst or instigator of change
- Evaluates "=agent=" and "=common=" bundles
- Obeys "=common control=" and "=agent control=" bodies.
- By default runs =$(sys.default_policy_path)= 
  - Privileged : =/var/cfengine/inputs/promises.cf=
  - Unprivileged: =~/.cfagent/inputs/promises.cf=

#+CAPTION: Speaker notes
#+begin_notes
 - =cf-agent= is the agent of change, its the pointy end of the stick, or the dangerous end of the gun.
- This is the component that you will interact with most commonly.
#+end_notes

** Pop Quiz
:PROPERTIES:
:ID:       09f10078-32a9-4e15-8e91-798fe1170b53
:END:

#+ATTR_REVEAL: :frag roll-in
- What needs to happen before remote agents can get policy from the hub?

#+ATTR_REVEAL: :frag roll-in
- Where is the policy that the agent runs by default?

#+ATTR_REVEAL: :frag roll-in
- What port needs to be open bidirectionally?

#+ATTR_REVEAL: :frag roll-in
- How does information from client hosts get into the Enterprise Hub Database?

#+ATTR_REVEAL: :frag roll-in
- What is the meaning of life, the universe and everything?

#+CAPTION: Speaker Notes
#+begin_notes
  - What needs to happen before remote agents can get policy from the hub? :: Establish Trust
  - Where is the policy that the agent runs by default? :: =$(sys.default_policy_path)= , =/var/cfengine/inputs/promises.cf=, =/var/cfengine/inputs=, or =$(sys.inputdir)=
  - What port needs to be open bidirectionally? :: *5308*
  - How does information from client hosts get into the Enterprise Hub Database? :: They are collected by cf-hub. Hub initiated collection, Client initiated advertisement of availability.
  - What is the meaning of life, the universe and everything? :: *42*.  In The Hitchhiker's Guide to the Galaxy by Douglas Adams, is the "Answer to the Ultimate Question of Life, the Universe, and Everything", calculated by a supercomputer named Deep Thought over a period of 7.5M years.
#+end_notes

* MPF & stdlib

The default "Masterfiles"

#+CAPTION: Speaker notes
#+begin_notes
The backbone of your policy, it's the scaffolding from which you can build on.
- When upgrading CFEngine, this is *typically upgraded first*.
#+end_notes

** Overview 
- =promises.cf=
- =update.cf=
- =standalone_self_upgrade.cf=
- =lib/*= 
- =cfe_internal/*=
- =controls/*=
- =inventory/*=
- =templates/*=

#+CAPTION: Speaker Notes
#+begin_notes
  While you can and on occasion may need to modify vendored policy, it's generally best to keep all custom policies separate from vendored files.

    - *promises.cf* is the main entry. This is the first file the agent reads by default. This is the stem cell for the rest of your policy.
    - *update.cf* is a separate *standalone* policy to manage updating policy and the cfengine agent itself.
    - *standalone_self_upgrade.cf* Is a separate *standalone* policy which is typically executed as a sub-agent by =update.cf= and is responsible for upgrading the cfengine binaries.
    - *lib/* Is the standard library (previously referred to as Common Open Promise Bundle|Body Libray (COPBL). Contains commonly used promise bundles and bodies for things like editing or copying files and managing services.
    - *cfe_internal/* contains policies related to managing cfengine itself.
    - *controls/* contains bodies that control CFEngine's behavior.
    - *inventory/* contains policies that extract useful details from the system into variables.
    - *templates/* contains templates, accessible via =def.template_dir= from policy, and =templates= ~cf-serverd~ shortcut.
#+end_notes

** User Entries
- =def.json= (/*Augments*/)
- =services/*.cf=
- =services/main.cf=
- =services/autorun/*.cf=
- =CUSTOM_DIRECTORY/*.cf=

#+CAPTION: Speaker Notes
#+begin_notes
  While you can and on occasion may need to modify vendored policy, it's generally best to keep all custom policies separate from vendored files.

  - =def.json= :: The first /Augments/ file (not vendored)
  - =services/*.cf= :: A directory structure for custom policies.
  - =services/main.cf= :: A place to hook in custom policy (vendored, but minimal)
  - =services/autorun/*.cf= :: Policy files that get automatically added to inputs if the class =services_autorun= is defined
  - =CUSTOM_DIRECTORY/*.cf= :: It's common that /all/ custom policy files are contained within their own directory, commonly named for the organization at the top level of the policy set.
#+end_notes

** Unattended Policy Execution Overview                             :ATTACH:
:PROPERTIES:
:ID:       22f5f5e0-c36f-4be8-ae6e-702619a863cf
:Attachments: policy_flow_diagram_2016-10-15_21-25-54.png
:END:

#+COMMENT: [[file:data/22/f5f5e0-c36f-4be8-ae6e-702619a863cf/policy_flow_diagram_2016-10-15_21-25-54.png]]

#+begin_src plantuml :file images/MPF-policy-execution-high-level.png
  create "cf-execd"
  loop "Check ""body executor control schedule"""
    note left of "cf-execd"
      cf-execd checks the schedule once a minute, but the default schedule results
      in execution once every 5 minutes.
    end note

    alt "At least one element of execution_schedule evaluates true"
      create "cf-agent -f update.cf"
      "cf-execd"->"cf-agent -f update.cf": Update Policy Execution
      alt """masterfiles/cf_promises_validated"" differs\nfrom ""intputs/cf_promises_validated"""
        note over "cf-agent -f update.cf"
          Copy masterfiles to inputs
        end note
      end
      alt "trigger_upgrade defined AND not running target version"
        create "cf-agent -f standalone_self_upgrade.cf"
        "cf-agent -f update.cf"->"cf-agent -f standalone_self_upgrade.cf": Self upgrade policy
      end
      note over "cf-agent -f update.cf"
        Execute bundles from Augments listed in
        ""vars.common_control_update_bundlesequence_end""
      end note

      destroy "cf-agent -f update.cf"
      create "cf-agent -f promises.cf"
      "cf-execd"->"cf-agent -f promises.cf": Normal Policy Execution
      note over "cf-agent -f promises.cf"
        Resolve inventory (inventory/*.cf)
      end note
      note over "cf-agent -f promises.cf"
        Resolve bundle common def (controls/def.cf)
      end note
      alt "services_autorun defined"
        note over "cf-agent -f promises.cf"
          Execute bundles tagged autorun in lexical order
        end note
      end
      note over "cf-agent -f promises.cf"
        Execute custom policy integrated into
        ""servies/main.cf""
      end note
      note over "cf-agent -f promises.cf"
        Execute bundles from Augments listed in
        ""vars.common_control_bundlesequence_end""
      end note
      destroy "cf-agent -f promises.cf"
    end
    ... 1 minute ...
  end
#+end_src

#+RESULTS:
[[file:images/MPF-policy-execution-high-level.png]]

** Pop Quiz
#+ATTR_REVEAL: :frag roll-in
- What is the /*MPF*/?

#+ATTR_REVEAL: :frag roll-in
- Where do you configure /most/ MPF tunables?

#+ATTR_REVEAL: :frag roll-in
- When is the MPF typically upgraded?

#+CAPTION: Speaker Notes
#+begin_notes
- What is the /*MPF*/? :: The /*Masterfiles Policy Framework*/. The default policy set.
- Where do you configure /most/ MPF tunables? :: Augments
- When is the MPF typically upgraded? :: First
#+end_notes

* Promise Theory
:PROPERTIES:
:ID:       5edd13bb-9803-4597-8021-26c2bd7fe6ab
:END:

#+ATTR_HTML: :alt Promise Theory Principles and Appications :style border:none;
[[file:images/promise_theory_cover.jpg]]

A model of *voluntary cooperation* between individual autonomous actors.

#+CAPTION: Speaker Notes
#+begin_notes
The fundamental underlying philosophy that CFEngine is based on.
#+end_notes

** Promises
:PROPERTIES:
:ID:       6cd785ef-1412-495b-a790-c9d09db48669
:END:

- A promise is a *statement of intent*
- Agents can only make promises about themselves

#+ATTR_HTML: :alt Thinking in Promises :style border:none;
[[file:images/thinking_in_promises_book_cover.jpg]]

#+CAPTION: Speaker Notes
#+begin_notes
  - The webserver process promises to be running
  - The file promises to have specific permissions
#+end_notes

** Basic Concepts

#+CAPTION: https://www.youtube.com/watch?v=2TPsB5WuZgk
#+REVEAL_HTML: <video controls width="800" data-src="./images/Promise-Theory-Basic-Concepts-part-1.mp4"></video>

* Language
:PROPERTIES:
:ID:       5edd13bb-9803-4597-8021-26c2bd7fe6ab
:END:

** Promise outcomes/results
:PROPERTIES:
:ID:       2b7a5dde-ba92-4861-90ae-2e1dc77875b2
:END:

- =kept=
- =repaired=
- =not_kept=
  - =failed=
  - =denied=
  - =timeout=

*Note:* Compound promises *can* have *multiple outcomes* at the same time
(/not_kept/ & /kept/ & /repaired/).

#+BEGIN_SRC cfengine3 :include-stdlib t :log-level info :exports both
  files:
    "/mnt/volume/file.txt"
      create => "true",
      perms => m( 777 ),
      edit_line => lines_present( "Hello World $(sys.date)" ),
      edit_defaults => empty;
#+END_SRC

#+CAPTION: Speaker Notes
#+begin_notes
- Imagine a file that exists with mode 600, yesterdays date, and sits on a full disk.
  
- kept :: /create => "true"/, is satisfied, so the promise is kept
- repaired :: /perms => m(777)/ is fixed, so the promise is repaired
- not_kept :: The file content is incorrect, but because the file system is full, we can't write a new file and replace the bad one, so promise not_kept
#+end_notes

** Promise types
:PROPERTIES:
:ID:       d8bf0344-95fc-408a-8d86-5fa382dace2b
:END:

#+Caption: List promise types
#+BEGIN_SRC sh :exports none
  cf-promises --syntax-description json | jq '.promiseTypes | keys | join( ", " )'
#+END_SRC

access, build_xpath, classes, *commands*, databases, defaults, delete_attribute, delete_lines, delete_text, delete_tree, field_edits, *files*, guest_environments, insert_lines, insert_text, insert_tree, measurements, meta, methods, *packages*, processes, replace_patterns, reports, roles, *services*, set_attribute, set_text, storage, users, vars

#+NAME: count_promise_types
#+BEGIN_SRC sh :exports none
  cf-promises --syntax-description json | jq '.promiseTypes | keys | length'
#+END_SRC

#+RESULTS: count_promise_types
: 30

#+Caption: Speaker Notes
#+begin_notes
  As of 3.15.0, there are 30 different promise types. The promise type available depend on the type of bundle used.
#+end_notes

** Syntax Structure
:PROPERTIES:
:ID:       a25de10e-8da3-4d79-b960-d409b8b4541a
:END:

#+BEGIN_SRC cfengine3
  bundle type name
  {
    promise_type:

      context::

        "promiser" -> { "optional", "stakeholder" }
          attribute_1 => value_1,
          attribute_2 => value_2,
          meta => { "tag1", "tag2", "tag3=something" },
          comment => "Why important";
  }

  body attribute_N name(optional)
  {
      context::
        attribute_N_1 => "value";
        attribute_N_2 => { "value" };
  }
#+END_SRC

#+CAPTION: Speaker Notes
#+begin_notes
  - Promise type: What kind? For example packages, or commands
  - Context: When/Where? For example prod Linux hosts in north America on
    Sundays at GMT 1700
  - Promiser: What. For example the httpd package, or the name of a command.
  - Stakeholders: Who Cares. For example Security Department, a specific policy
    or compliance id CIS-1.1.17, another promise, a ticketing system identifier.
  - Attributes: How/Details. For example should the package be present or absent
    on the system? Should the command be executed inside of a shell, jailed
    withing a specific directory, or run as a specific user?
  - Why: Why is this important? What can go wrong if this is not in place.
    Visible in verbose logs.
#+end_notes
** Bundles
:PROPERTIES:
:ID:       0d0ded6f-dfa3-4d2e-bc87-c79528f63667
:END:

- Collection of logically related promises
- Can take parameters
- Maintain /some/ variable state
- Can return values
- Are *not functions*

#+CAPTION: Speaker Notes
#+begin_notes
  A [[https://docs.cfengine.com/latest/guide-language-concepts-bundles.html][*bundle*]] is a collection of promises. It is a logical grouping of any number
  of promises, usually for a common purpose. Bundles can optionally take
  parameters. Check out the documentation on [[https://docs.cfengine.com/latest/guide-writing-and-serving-policy-bundles-best-practices.html][best practices with bundles]].

  - Bundles can be used /like/ functions. However, please note they maintain
    some state from thier last actuation.
    - Strings, lists, and data containers contain last value and may be
      re-defined.
    - Classic arrays are cleared at the *beginning* of each bundle actuation.
    - Bundle scoped classes do not persist
#+end_notes

*** Example bundles hold /some/ state
:PROPERTIES:
:ID:       a90f2524-ea7b-4bb3-a233-1f919137d61e
:END:

#+NAME: example-bundles-maintain-some-variable-state.cf
#+CAPTION: =examples/example-bundles-maintain-some-variable-state.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/example-bundles-maintain-some-variable-state.cf
bundle agent main
{
  methods:
      "" usebundle => set_item_in_bag( "hammer", "slightly damaged");
      "" usebundle => set_item_in_bag( "pickaxe", "perfect");
      "" usebundle => set_item_in_bag( "flask", "half full");
      "" usebundle => report_bag_contents;
  reports:
    "$(with)" with => join( ", ", getindices( "set_item_in_bag.array" ) );
}
bundle agent set_item_in_bag(item, value)
{
  vars:
    "$(item)" string => "$(value)";
    "array[$(item)]" string => "$(value)";
}
bundle agent report_bag_contents
{
  vars:
    "l" slist => variablesmatching("default:set_item_in_bag\..*");
    "a[$(l)]" string => nth( string_split( "$(l)", "\.", 2 ), 1);
  reports:"You look in the bag and see ...."; "A $($(l)) $(a[$(l)])";
}
#+END_SRC

#+REVEAL: split

#+RESULTS: example-bundles-maintain-some-variable-state.cf
: R: You look in the bag and see ....
: R: A slightly damaged hammer
: R: A perfect pickaxe
: R: A half full array[flask]
: R: A half full flask
: R: flask

*** Bundles for logical abstraction
:PROPERTIES:
:ID:       07926d58-2e11-4835-a6a9-19542cb28ef4
:END:

For example, a bundle to configure Apache might:

- install the =apache2= package
- edit the configuration file
- copy the web server content
- configure file-system permissions
- ensure the httpd process is running
- restart the httpd process when necessary

*** Bundle types
:PROPERTIES:
:ID:       db7db64f-bb90-40eb-9fbf-052ef57f14e8
:END:

#+BEGIN_SRC sh :exports code
  cf-promises --syntax-description json | jq '.bundleTypes | keys[]'
#+END_SRC

#+RESULTS:
| agent     |
| common    |
| edit_line |
| edit_xml  |
| monitor   |
| server    |

- [[https://docs.cfengine.com/latest/guide-language-concepts-normal-ordering.html*agent-normal-ordering][=agent=]] :: evaluated by ~cf-agent~
- [[https://docs.cfengine.com/latest/guide-language-concepts-bundles.html*common-bundles][=common=]] :: evaluated by *all* components
- [[https://docs.cfengine.com/latest/reference-promise-types-edit_line.html][=edit_line=]] :: evaluated by ~cf-agent~ for files type promises
- [[https://docs.cfengine.com/latest/reference-promise-types-edit_xml.html][=edit_xml=]] :: evaluated by ~cf-agent~ for files type promises
- [[https://docs.cfengine.com/latest/guide-language-concepts-normal-ordering.html*server-normal-ordering][=monitor=]] :: evaluated by ~cf-monitord~
- [[https://docs.cfengine.com/latest/guide-language-concepts-normal-ordering.html*server-normal-ordering][=server=]] :: evaluated by ~cf-serverd~

#+CAPTION: Speaker Notes
#+begin_notes
Bundles have a type which specify how they can be used.
#+end_notes

*** Bundlesequence
- =main= is the default
- =__main__= is treated as /main/ if in =$(sys.policy_entry_filename)=

#+BEGIN_SRC cfengine3 :include-stdlib t :log-level info :exports both
  bundle agent inventory_things
  {
    vars:
      "thing"
        string => readfile( "/tmp/thing", inf ),
        meta => { "inventory", "attribute_name=Inventoried Thing" };
  }
  bundle agent __main__
  {
    methods: "inventory_things";
  }
#+END_SRC

#+CAPTION: Speaker Notes
#+begin_notes
- main is great for example snippets
- =__main__= is great for polices that are standalone, but can be integrated
#+end_notes


#+CAPTION: Speaker Notes
#+begin_notes
    - Strings, lists, and data containers contain last value and may be
      re-defined.
    - Classic arrays are cleared at the *beginning* of each bundle actuation, =set_item_in_bag=. /flask/ was the last $(item) used to define a classic array. Since it has not yet been actuated again, it persists.
#+end_notes


** Bodies
:PROPERTIES:
:ID:       624ead8d-4aac-47c4-8cd1-e1eeed2326c8
:END:

- Collection of attributes
- Have a type ( e.g. =classes=, =perms=, =copy_from= )
- Can take parameters
- Can be inherited (3.8+)
- Can be /defaulted/ for a given promise /type/ (3.9+)

#+BEGIN_SRC sh :exports none
  cf-promises --syntax-description json | jq '.bodyTypes | keys | length'
#+END_SRC

#+RESULTS:
: 41

There are [[https://docs.cfengine.com/latest/reference-all-types.html*all-body-types][*41*]] body types as of 3.15.0

#+CAPTION: Speaker Notes
#+begin_notes
- Body types map to promise attribute names, the Left Hand Side (LHS) of the hasrocket ==>= also called "Fat comma" or "Fat arrow"
#+end_notes

#+REVEAL: split

#+BEGIN_SRC sh :exports code 
  cf-promises --syntax-description json | jq '.bodyTypes | keys |join(", ") '
#+END_SRC

acl, action, agent, changes, classes, common, contain, copy_from, database_server, delete, delete_select, depth_search, edit_defaults, edit_field, environment_interface, environment_resources, executor, file, file_select, hub, insert_select, link_from, location, match_value, monitor, mount, package_method, package_module, password, perms, printfile, process_count, process_select, rename, replace_with, report_data_select, runagent, select_region, server, service_method, volume

*** Special bodies that control agent behavior
- body common control
- body file control
- body agent control
- body server control
- body executor control
- body hub control

#+Caption: Speaker notes
#+begin_notes
- body common control :: Affects behavior of all components. Files to parse, bundlesequence
- body file control :: Controls parsing behavior. Files to include, namespaces
- body agent control :: 
- body server control
- body executor control
- body hub control
#+end_notes

*** Default bodies
:PROPERTIES:
:ID:       3919f6fb-eb3e-4aaf-8ebc-6cd57f3db6ce
:END:

#+Caption: Speaker notes
#+begin_notes
3.9 introduced the ability to define a body that is used by all occurances of a
given promise type unless otherwise specified.

For example, to set all file type promises to warn you can add the
=files_action= body in the =bodydefault= namespace.
#+end_notes

#+Name: =examples/default-bodies.cf=
#+CAPTION: =examples/default-bodies.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/default-bodies.cf :log-level inform
bundle agent main
{
  files:
    "/tmp/show_default_action"
      create => "true";

    "/tmp/show_explicit_action"
      create => "true",
      action => fix;
}

body action fix
{
  action_policy => "fix";
}

body file control
{
  namespace => "bodydefault";
}
body action files_action
{
  action_policy => "warn";
}
#+END_SRC

#+RESULTS: =examples/default-bodies.cf=
:  warning: Warning promised, need to create file '/tmp/show_default_action'
:     info: Created file '/tmp/show_explicit_action', mode 0600

** Normal Order
:PROPERTIES:
:ID:       cae5d292-c985-4217-90c9-770e83c83164
:END:

- The order in which CFEngine executes *promise types*

  - Classes then Vars are evaluated during [[https://docs.cfengine.com/docs/3.7/guide-language-concepts-normal-ordering.html*cf-promises-policy-validation-step][policy parsing]] and [[https://docs.cfengine.com/docs/3.7/guide-language-concepts-normal-ordering.html*agent-pre-evaluation-step][pre-eval]]
  - Promises are evaluated from top to bottom respecting class restrictions
  - Bundles listed in the bundlesequence or activated via methods are given 3 pass evaluation

*** Example:

#+BEGIN_SRC cfengine3 :include-stdlib t :log-level info :exports both :bundlesequence illustrating_normal_order :tangle examples/illustrating_normal_order.cf :command-in-result t
  bundle agent illustrating_normal_order
  {
     vars:
       "color1" string => "red";

     reports:
       "$(color1)+$(color2) = Purple";

     vars:
       "color2" string => "blue";
  }
#+END_SRC

#+RESULTS:
: # cf-agent --bundlesequence illustrating_normal_order --no-lock --log-level info --file illustrating_normal_oder.cf
:     info: Using command line specified bundlesequence
: R: red+blue = Purple

#+REVEAL: split

#+BEGIN_SRC cfengine3 :include-stdlib t :log-level info :exports both :bundlesequence illustrating_normal_order :tangle examples/illustrating_normal_order2.cf :command-in-result t
  bundle agent illustrating_normal_order
  {
     vars:
       "color1" string => "red";
       "color2" string => "blue";

     reports:
       "$(color1)+$(color2) = Purple";
  }
#+END_SRC

#+RESULTS:
 : # cf-agent --bundlesequence illustrating_normal_order --no-lock --log-level info --file illustrating_normal_oder2.cf
:     info: Using command line specified bundlesequence
: R: red+blue = Purple

** Augments (=def.json=)

- Very early definition
- Loaded if =def.json= is found next to =$(sys.policy_entry_filename)=
- Classes based on system discovery (platform/networks/arch)
- Variables defined in =def= bundle scope

*** Example augments
:PROPERTIES:
:ID:       8b795d6c-fd4d-40b4-a4cc-0f39af32d01a
:END:

#+CAPTION: Speaker Notes
#+begin_notes
- Define =by_regular_expression= if the class =ubuntu_X= is defined, where =X= one or more is an integers.
- Define =by_class_expression= if the class =nickanderson_thinkpad_w550s= is defined and it's a .
#+end_notes

#+Name: examples/augments/def.json
#+Caption: =examples/augments/def.json=
#+BEGIN_SRC json :tangle ./examples/augments/def.json
  {
    "classes": {
        "by_regular_expression": [ "ubuntu_\\d+" ],
        "by_class_expression": [ "(Afternoon|Evening).(Monday|Wednesday|Friday)::" ],
    },
    "vars": {
        "myvar1": "defined from augments",
        "myvar2": "defined from augments"
      }
  }
#+END_SRC 

*** Example policy using augments
:PROPERTIES:
:ID:       99fd0f7d-67e3-417b-be94-b931b6719044
:END:

#+Caption: =examples/augments/augments.cf=
#+Name: examples/augments/augments.cf
#+BEGIN_SRC cfengine3 :tangle ./examples/augments/augments.cf :command-in-result t
  bundle agent main
  {
    reports:
      "I defined '$(const.dollar)(def.myvar1)' as '$(def.myvar1)'";
      
      by_regular_expression::
        "Define classes from augments based on a regular expression";

      by_class_expression::
        "Define classes from augments based on CFEngine class expressions";

  }
#+END_SRC

*** Example output

#+BEGIN_SRC sh :results output :exports both
  cf-agent --no-lock --file ./examples/augments/augments.cf
#+END_SRC

#+RESULTS:
: R: I defined '$(def.myvar1)' as 'defined from augments'
: R: Define classes from augments based on a regular expression
: R: Define classes from augments based on CFEngine class expressions

*** Policy always wins!
:PROPERTIES:
:ID:       3a19c50f-f805-421a-8bd7-08365d662530
:END:

#+Name: examples/augments/augments-policy-wins.cf
#+Caption: =examples/augments/augments-policy-wins.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/augments/augments-policy-wins.cf :command-in-result t
  bundle common def
  {
    vars:
      "myvar1" string => "Defined in policy";
      "myvar2"
        string => "Defined in policy",
        if => not( isvariable( myvar2 ) );
  } 
  bundle agent main
  {
    reports:
      "I defined '$(const.dollar)(def.myvar1)' as '$(def.myvar1)'";
      "I defined '$(const.dollar)(def.myvar2)' as '$(def.myvar2)'";

      by_regular_expression::
        "Define classes from augments based on a regular expression";

      by_class_expression::
        "Define classes from augments based on CFEngine class expressions";
  }
#+END_SRC

#+CAPTION: Speaker Notes
#+begin_notes
Here, we define =def.myvar1= directly in policy, and we define =def.myvar2= if it's not already defined (i.e. set via augments).
#+end_notes

*** Example output

#+BEGIN_SRC sh :results output :exports both
  cf-agent --no-lock --file ./examples/augments/augments-policy-wins.cf
#+END_SRC

#+RESULTS:
: R: I defined '$(def.myvar1)' as 'Defined in policy'
: R: I defined '$(def.myvar2)' as 'defined from augments'
: R: Define classes from augments based on a regular expression
: R: Define classes from augments based on CFEngine class expressions

*** Multiple augments

Merge more augments on top.

#+CAPTION: Speaker Notes
#+begin_notes
Here we merge a more specific augments for linux (the value derived from sys.os on top of the default.
#+end_notes

#+Caption: =examples/augments-multiple/def.json=
#+BEGIN_SRC json :tangle ./examples/augments-multiple/def.json
  {
    "vars": {
        "myvar1": "defined from augments for all",
        "myvar2": "defined from augments for all"
      },
    "augments": [ "$(sys.policy_entry_dirname)/$(sys.os).json" ]
  }
#+END_SRC 

#+CAPTION: =examples/augments-multiple/linux.json=
#+BEGIN_SRC json :tangle ./examples/augments-multiple/linux.json
  {
    "vars": {
        "myvar2": "override for linux hosts"
      }
  }
#+END_SRC 

*** Multiple augments: Example policy

#+CAPTION: Speaker Notes
#+begin_notes
Here we simply report the variable values to illustrate how the value of myvar2 was overridden
#+end_notes

#+NAME: examples/augments-multiple/promises.cf
#+Caption: =examples/augments-multiple/promises.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/augments-multiple/promises.cf :command-in-result t
  bundle agent main
  {
    reports:
      "'$(const.dollar)(def.myvar1)' is '$(def.myvar1)'";
      "'$(const.dollar)(def.myvar2)' is '$(def.myvar2)'";
  }
#+END_SRC

#+BEGIN_SRC sh :results output :exports both
  cf-agent --no-lock --file ./examples/augments-multiple/promises.cf
#+END_SRC

#+RESULTS:
: R: '$(def.myvar1)' is 'defined from augments for all'
: R: '$(def.myvar2)' is 'override for linux hosts'

** Macros

- Prevent parsing
- Use for supporting future syntax, speed optimizations

*** minimum_version
:PROPERTIES:
:ID:       e1c5a8f8-eb8b-47f2-9479-9fd0fdede739
:END:

#+Name: =examples/macros-if-minimum_version.cf=
#+CAPTION: =examples/macros-if-minimum_version.cf=
#+BEGIN_SRC cfengine3 :include-stdlib t :log-level info :exports code :tangle ./examples/macros-if-minimum_version.cf :bundlesequence example_macro_minimum_version
  bundle agent example_macro_minimum_version 
  {
  @if minimum_version(4.0.0)
    This contains completely invalid syntax, but it's OK.
    Only versions 4 and greater will evaluate this section.
  @endif
  @if minimum_version(3.14.0)
        # the function `classfiltercsv()` was introduced in 3.14.0
    vars:
        "container"  data => classfiltercsv( $(file), # File
                                             true, # Has header
                                             0, # Class column
                                             2); # Optional sort column
  @endif
  }
#+END_SRC

*** feature
:PROPERTIES:
:ID:       b90a28af-c48b-4b68-928b-5610a29d6150
:END:
- [[https://docs.cfengine.com/docs/3.10/reference-macros.html#features][Feature Macro]] documentation

You can conditionally parse policy based on compiled in features using this
macro.

#+Name: =examples/macros-if-feature-yaml.cf=
#+CAPTION: =examples/macros-if-feature-yaml.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/macros-if-feature-yaml.cf :exports code
  bundle agent main
  {
  @if feature(yaml)
  # the yaml library may not be compiled in
    vars: "container" data => parseyaml('
  - array1
  - array2
  - key: 1
  - key: 2');
  @endif

    reports:
      "$(with)" with => string_mustache('{{%-top-}}', container );
  }
#+END_SRC

** Functions

#+Caption: Count functions
#+BEGIN_SRC sh :exports none
   cf-promises --syntax-description json | jq '.functions | keys | length' 
#+END_SRC

#+RESULTS:
: 171

There are 171 functions as of 3.15.0

#+Caption: Count functions
#+BEGIN_SRC sh :exports none
   cf-promises --syntax-description json | jq '.functions | keys | join( ", ")'
#+END_SRC

accessedbefore, accumulated, ago, and, basename, bundlesmatching, bundlestate, callstack_callers, callstack_promisers, canonify, canonifyuniquely, changedbefore, classesmatching, classfiltercsv, classify, classmatch, concat, countclassesmatching, countlinesmatching, data_expand, data_readstringarray, data_readstringarrayidx, data_regextract, data_sysctlvalues, datastate, difference, dirname, diskfree, escape, eval, every, execresult, expandrange,

#+REVEAL: split

file_hash, fileexists, filesexist, filesize, filestat, filter, findfiles, findprocesses, format, getclassmetatags, getenv, getfields, getgid, getindices, getuid, getuserinfo, getusers, getvalues, getvariablemetatags, grep, groupexists, hash, hash_to_int, hashmatch, host2ip, hostinnetgroup, hostrange, hostsseen, hostswithclass, hubknowledge, ifelse, intersection, ip2host, iprange, irange, isdir, isexecutable, isgreaterthan, isipinsubnet, islessthan, islink, isnewerthan, isplain, isvariable,

#+REVEAL: split

join, lastnode, laterthan, ldaparray, ldaplist, ldapvalue, length, lsdir, makerule, maparray, mapdata, maplist, max, mean, mergedata, min, network_connections, none, not, now, nth, on, or, packagesmatching, packageupdatesmatching, parseintarray, parsejson, parserealarray, parsestringarray, parsestringarrayidx, parseyaml, peerleader, peerleaders, peers, processexists, product, randomint, read_module_protocol, readcsv, readdata, readenvfile,

#+REVEAL: split

readfile, readintarray, readintlist, readjson, readrealarray, readreallist, readstringarray, readstringarrayidx, readstringlist, readtcp, readyaml, regarray, regcmp, regex_replace, regextract, registryvalue, regldap, regline, reglist, remoteclassesmatching, remotescalar, returnszero, reverse, rrange, selectservers, shuffle, some, sort, splayclass, splitstring, storejson, strcmp, strftime, string_downcase, string_head, string_length, string_mustache, string_replace, string_reverse, string_split, string_tail, string_upcase, sublist, sum, sysctlvalue, translatepath, unique, url_get, usemodule, userexists, variablesmatching, variablesmatching_as_data, variance

** Pop Quiz
:PROPERTIES:
:ID:       0b0376ac-661e-498f-b3a3-b4c8a3716854
:END:

#+ATTR_REVEAL: :frag roll-in
- What is a bundle?
#+ATTR_REVEAL: :frag roll-in
- What is the fundamental underlying philosophy that CFEngine is based on?
#+ATTR_REVEAL: :frag roll-in
- When is the next break?
#+ATTR_REVEAL: :frag roll-in
- Which component collects reports from remote agents?
#+ATTR_REVEAL: :frag roll-in
- What types of bundles are there?
#+ATTR_REVEAL: :frag roll-in
- In what order are promises within a bundle processed?
#+ATTR_REVEAL: :frag roll-in
- How can you use new language features when you still have some old agents?

#+CAPTION: Speaker Notes
#+begin_notes
- What is a bundle ::  A collection of *promises*, a logical container, a way of abstracting complexity
- What is the fundamental underlying philosophy that CFEngine is based on? ::  *Promise Theory*
- What allows you to set classes and define variables /very/ early during agent initialization?
- When is the next break? ::
- Which component collects reports from remote agents? ::  *cf-hub*
- What types of bundles are there? ::  *common*, *agent*, *edit_line*, *server*, *monitor*, *edit_xml*
- In what order are promises within a bundle processed? :: The *Normal Order*
- How can you use a new function when you still have some old agents? :: Macros!
#+end_notes

* Making Decisions: Context Classes and Expressions
:PROPERTIES:
:ID:       ad47d876-4578-446e-be87-c2ef138167e6
:END:

** Classes
:PROPERTIES:
:ID:       bb4ef74b-6c71-419c-8db1-ad212c192eb0
:END:

- Restrict promises based on context
- Usable in bundles and bodies
- Used for making decisions
- Can be combined with expressions

#+CAPTION: Speaker Notes
#+begin_notes
  A promise might only apply to Linux systems on Sundays, when a [[https://docs.cfengine.com/latest/guide-language-concepts-variables.html][variable]] has a
  certain value or any other arbitrary condition or combination of various
  conditions.

- Think in [[https://en.wikipedia.org/wiki/Set_%28mathematics%29][sets]]
  - Try and treat servers like cattle *not* pets
#+end_notes

** What classes are defined?
:PROPERTIES:
:ID:       d314d4d2-4ca9-4636-9562-203df412b474
:END:

#+CAPTION: Before 3 pass evaluation
#+BEGIN_SRC shell :results output
  cf-promises --show-classes
#+END_SRC

#+CAPTION: At the end of a policy run
#+BEGIN_SRC shell :results output
  cf-agent --show-evaluated-classes
#+END_SRC

#+CAPTION: Currently within a policy
#+BEGIN_SRC cfengine3 :include-stdlib t :log-level info :exports both
  vars:
    "defined" slist => classesmatching( ".*" );
#+END_SRC

#+CAPTION: Speaker Notes
#+begin_notes
  Note, show-classes will not show ALL possible classes. It only performs
  pre-eval so it is only showing the classes that are defined after pre-eval.
#+end_notes

*** Example
:PROPERTIES:
:ID:       94e170a4-1452-426a-9d79-3b3cf4c0757d
:END:

#+BEGIN_SRC shell :results output
  cf-promises --show-classes | tail -n+2 | awk -vORS=", " '{print $1}'
#+END_SRC

127_0_0_1, 172_17_0_1, 192_168_122_1, 192_168_42_189, 4_cpus, 64_bit, Afternoon, Day23, February, GMT_Day23, GMT_Evening, GMT_February, GMT_Hr18, GMT_Hr18_Q3, GMT_Lcycle_1, GMT_Min30_35, GMT_Min34, GMT_Q3, GMT_Sunday, GMT_Yr2020, Hr12, Hr12_Q3, Lcycle_1, Min30_35, Min34, PK_SHA_43c979e264924d0b4a2d3b568d71ab8c768ef63487670f2c51cd85e8cec63834, Q3, Sunday, Yr2020, any, cfengine, cfengine_3, cfengine_3_15, cfengine_3_15_0, common, compiled_on_linux_gnu, debian, debian_buster, enterprise, enterprise_3, enterprise_3_15, enterprise_3_15_0, enterprise_edition,

#+REVEAL: split

fe80__5ee0_c5ff_fe9f_f38f, feature, feature_curl, feature_def, feature_def_json, feature_def_json_preparse, feature_tls, feature_tls_1, feature_tls_1_0, feature_tls_1_1, feature_tls_1_2, feature_tls_1_3, feature_xml, feature_yaml, ipv4_127, ipv4_127_0, ipv4_127_0_0, ipv4_127_0_0_1, ipv4_172, ipv4_172_17, ipv4_172_17_0, ipv4_172_17_0_1, ipv4_192, ipv4_192_168, ipv4_192_168_122, ipv4_192_168_122_1, ipv4_192_168_42, ipv4_192_168_42_189, ipv4_gw_192_168_42_1, ipv6_fe80__5ee0_c5ff_fe9f_f38f, linux, linux_5_0_0_38_lowlatency, linux_x86_64, linux_x86_64_5_0_0_38_lowlatency, linux_x86_64_5_0_0_38_lowlatency__41_Ubuntu_SMP_PREEMPT_Tue_Dec_3_01_06_41_UTC_2019,

#+REVEAL: split

mac_02_42_fb_b7_c0_59, mac_52_54_00_6b_62_06, mac_5c_e0_c5_9f_f3_8f, my_other_example, net_iface_docker0, net_iface_lo, net_iface_virbr0, net_iface_wlan0, nickanderson_thinkpad_w550s, nova, nova_3, nova_3_15, nova_3_15_0, nova_edition, systemd, test_class_29665402e2b4331f10b8d767b512cd916eeb5db9, test_class_29665402e2b4331f10b8d767b512cd916eeb5db9_2, ubuntu, ubuntu_19, ubuntu_19_04, x86_64, 

** Class expressions
:PROPERTIES:
:ID:       65733534-2c63-4bb5-86b6-7ed9140c7050
:END:

#+Caption: Class Expressions
| *.*  (dot)         | *AND*      |
| *&*  (ampersand)   | *AND*      |
| *l*  (pipe)        | *OR*       |
| *!*  (exclamation) | *NOT*      |
| *()* (parenthesis) | *grouping* |

- It's more common to use *=.=* than *=&=* to express AND

#+CAPTION: Speaker Notes
#+begin_notes
  Classes can be combined into expressions to make complex decisions.
#+end_notes

*** Example illustrating class expressions
:PROPERTIES:
:ID:       161654cc-bffb-4401-a211-9b17f600136d
:END:

#+Name: examples/00-01-using_class_expressions.cf
#+CAPTION: =examples/00-01-using_class_expressions.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/00-01-using_class_expressions.cf
bundle agent main
{
  files:
    linux.(Sunday|Saturday)::
      "/etc/nologin" -> { "Human Resources" }
        create => "true",
        comment => "Disallow non-root logins on the weekend.
                    We believe in work-life balance, and
                    encourage it.";

    linux.!(Sunday|Saturday)::
      "/etc/nologin" -> { "Business Operations" }
        delete => tidy,
        comment => "People need to be able to log in for them
                  to do their work during the week";
}
#+END_SRC

#+CAPTION: Speaker Notes
#+begin_notes
  Here we use class expressions to make sure that unprivileged users are not
  allowed to log in on the weekend, and also that they are allowed to log in
  during the week.
#+end_notes

** Class types
:PROPERTIES:
:ID:       c897c3c2-1b36-4109-a447-de511147c19f
:END:

- Hard Classes
- Soft Classes

** Hard classes
:PROPERTIES:
:ID:       7eb9939c-b88a-4914-81c4-7439a46fb94d
:END:

- Defined by agent
- Not configurable
- Always available
- Discovered each run
- Cannot be undefined

=redhat=, =Thursday=, =linux=

** Soft classes
:PROPERTIES:
:ID:       ac5c9911-31e1-4a9c-a0f5-eea6013b78dc
:END:

- Defined by policy
- Based on anything
- Available after definition
- Can persist for period of time
- Can be namespace or bundle scoped
- Can be undefined only as the result of a promise

** Valid Class names
:PROPERTIES:
:ID:       c908f05c-9569-43a9-9444-3ea5201bd44a
:END:

- Allowed characters include =[a-zA-Z0-9_]=
- *Canonify* a string to produce a valid class name
  - Converts invalid characters to =_=.
- Automatically canonified *when defined*

*Note:* Classes are *NOT* automatically canonified when *checked*.

*** Example of automatic canonification
:PROPERTIES:
:ID:       5e6887e9-914e-4f09-91ea-f117bfda7cd3
:END:

#+Name: examples/00-01-classes_canonification.cf
#+Caption: =examples/00-01-classes_canonification.cf=
#+BEGIN_SRC cfengine3 :tangle examples/00-01-classes_canonification.cf
bundle agent main
{
  vars:
    "my_class_name" string => "Invalid-Class/Name!";
    "c_my_class_name" string => canonify( "$(my_class_name)" );

  classes:
    "$(my_class_name)" expression => "any";

  reports:

    "'$(my_class_name)' is **NOT** a class that is defined"
      unless => "$(my_class_name)";

    "'$(c_my_class_name)' **IS** a defined class"
      if => canonify( $(my_class_name) );
}
#+END_SRC

#+REVEAL: split

#+RESULTS: examples/00-01-classes_canonification.cf
: R: 'Invalid-Class/Name!' is **NOT** a class that is defined
: R: 'Invalid_Class_Name_' **IS** a defined class

** Class scope
:PROPERTIES:
:ID:       3000b84d-cd58-49c7-9e2e-06f72d5e3b80
:END:

- Namespace scoped classes are accessible from any bundle.
- Persist until end of agent run or explicitly undefined.
- Bundle scoped classes are only accessible from within the bundle the class was defined.
- All hard classes are namespace scoped

#+CAPTION: Speaker Notes
#+begin_notes
  Don't worry too much about namespaces yet. It's an advanced topic and mostly
  relates to very large policy sets or environments with many different groups
  of policy writers.

  - Namespace scoped classes are also referred to as "global" classes.
  - Inventoried classes *must be =namespace= scoped*.
#+end_notes

** Class scope rules
:PROPERTIES:
:ID:       b10aa5d5-fb2a-46d5-8d17-eddc7db5a327
:END:

#+Caption: Default scope for =classes= *type* promises
| Bundle Type | Scope       |
| =common=    | =namespace= |
| =agent=     | =bundle=    |

- =classes= bodies default to *namespace scope*

*Pro Tip:* Use *=bundle=* scoped classes whenever possible.
 
#+CAPTION: Speaker Notes
#+begin_notes
  - By default classes defined by classes type promises in *common bundles* are *namespace scoped*
  - By default classes defined by classes type promises in *agent bundles* are *bundle scoped*
  - By default classes defined as the *result of promise outcomes* (=classes bodies=) are *namespace scoped*

  Namespace scope classes if not maintained well can cause other conditions to be met unexpectedly. For example, consider if you defined the class  =config_repaired= or =restart_service=. Which config, which service?
#+end_notes

** Define custom classes by expression
:PROPERTIES:
:ID:       59e5f34c-ef7d-41ff-a24e-6f07e7cba410
:END:
#+Name: examples/00-10-classes_by_expression.cf
#+Caption: =examples/00-10-classes_by_expression.cf=
#+BEGIN_SRC cfengine3 :tangle examples/00-10-classes_by_expression.cf
bundle agent main
{
  classes:
    "weekend" or => { "Saturday", "Sunday" };
    "weekday" not => "weekend";

    "business_hours"
      expression => "weekday.(Hr9|Hr10|Hr11|Hr13|Hr14|Hr15|Hr16|Hr17)",
      comment => "Weekdays from 9-5 excluding the lunch hour.";

    "webserver"
      expression => regcmp( "www.*", $(sys.fqhost) ),
      comment => "Identify webservers based on their name";

    "north_america"
      expression => iprange( "10.1.0.0/16" );
}
#+END_SRC

** Define custom classes by promise outcome
:PROPERTIES:
:ID:       a644656f-2389-4d3c-9b7a-043608beb030
:END:

#+Name: examples/00-10-classes_define_based_on_promise_outcome.cf
#+Caption: =examples/00-10-classes_define_based_on_promise_outcome.cf=
#+BEGIN_SRC cfengine3 :tangle examples/00-10-classes_define_based_on_promise_outcome.cf
bundle agent main
{
  vars:
    "config[PermitRootLogin]" string => "no";

  files:
    "/etc/ssh/sshd_config"
      edit_line => set_line_based("$(this.bundle).config", # Config MAP
                                  " ",        # Separator
                                  "\s+",      # Separator regex
                                  ".*",       # Keys to consider
                                  "\s*#\s*"), # Lines to ignore
      classes => scoped_classes_generic("bundle", "sshd_config");

  services:
    sshd_config_repaired::
      "sshd"
        service_policy => "restart",
        comment => "For sshd to pick up changed config it must be restarted."
}
#+END_SRC

** Example - traditional class expressions
:PROPERTIES:
:ID:       8c2e63ee-c972-4faa-bdd7-515c75ca2f16
:END:

#+Name: =examples/00-10-classes_traditional_expression.cf=
#+Caption: =examples/00-10-classes_traditional_expression.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/00-10-classes_traditional_expression.cf
bundle agent main
{
  reports:
      "Hello World!";
    linux.!(Saturday|Sunday)::
      "This is a linux host.";
      "Today is not Saturday or Sunday.";
}
#+END_SRC

#+RESULTS: =examples/00-10-classes_traditional_expression.cf=
: R: Hello World!
: R: This is a linux host.
: R: Today is not Saturday or Sunday.

#+CAPTION: Speaker Notes
#+begin_notes
  - Apply until the next class expression, promise type, or end of bundle
  - If unspecified promises are in the =any= context.
  - Variables are not allowed in traditional class expressions.
#+end_notes

** Example - restrict individual promises with if and unless
:PROPERTIES:
:ID:       fb1f6643-9313-4053-8b09-fa190448ef0a
:END:

#+Name: =examples/00-10-classes_example_if_and_unless.cf=
#+Caption: =examples/00-10-classes_example_if_and_unless.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/00-10-classes_example_if_and_unless.cf
bundle agent main
{
  vars:
    "platforms" slist => { "linux", "windows" };

  reports:
    "I am a $(platforms) host"
      if => "$(platforms)";
      # ifvarclass => "$(platforms)";

    "I was made by Microsoft"
      unless => "!windows";
}
#+END_SRC

#+RESULTS: =examples/00-10-classes_example_if_and_unless.cf=
: R: I am a linux host

#+CAPTION: Speaker Notes
#+begin_notes
- You may see the use of ifvarclass, it's the original syntax
-  **AND** with a traditional class expression.
#+end_notes

** Example - variable class expressions
:PROPERTIES:
:ID:       ca2bd83a-79ec-4b13-a637-8ccd547e1660
:END:

#+Name: examples/00-10-classes_example_variable_class_expressions.cf
#+Caption: =examples/00-10-classes_example_variable_class_expressions.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/00-10-classes_example_variable_class_expressions.cf
bundle agent main
{
  vars:
    "platforms" slist => { "linux", "windows" };

  reports:
    !(Saturday|Sunday)::
      "It's a weekday and I am a $(platforms) host!"
        if => "$(platforms)";

    "$(platforms)"::
      "I am a $(platforms) host and it's a weekday!"
        if => "!(Saturday|Sunday)";
}
#+END_SRC

#+RESULTS:
: R: It's a weekday and I am a linux host!
: R: I am a linux host and it's a weekday!

#+CAPTION: Speaker Notes
#+begin_notes
- *More flexibility with variable class expressions*
- Like traditional class expressions variable class expressions apply until the next class expression, promise type, or end of bundle.

  In 3.7 traditional class expressions gained the ability to de-reference
  variables when quoted.
#+end_notes

** Functions that return "context"

#+BEGIN_SRC sh :exports code
  cf-promises --syntax-description json | jq '.functions | \
     with_entries( select(.value.returnType == "context") ) | \
     keys | join( ", ")'
#+END_SRC

accessedbefore, changedbefore, classify, classmatch, every, fileexists, filesexist, groupexists, hashmatch, hostinnetgroup, hostrange, iprange, isdir, isexecutable, isgreaterthan, isipinsubnet, islessthan, islink, isnewerthan, isplain, isvariable, laterthan, ldaparray, none, processexists, read_module_protocol, regarray, regcmp, regextract, regldap, regline, reglist, remoteclassesmatching, returnszero, some, splayclass, strcmp, usemodule, userexists

** Pop Quiz
:PROPERTIES:
:ID:       8aec7270-5f1d-4e29-80b5-e1c635bedf19
:END:

#+ATTR_REVEAL: :frag roll-in
- What types of classes are there?

#+ATTR_REVEAL: :frag roll-in
  - What is the difference?

#+ATTR_REVEAL: :frag roll-in
- What are valid class characters?

#+ATTR_REVEAL: :frag roll-in
- What is the default scope for classes defined as the result of a promise outcome using a classes body?

#+ATTR_REVEAL: :frag roll-in
- What component serves policy files, which hosts can be a policy server?

#+CAPTION: Speaker Notes
#+begin_notes
- What types of classes are there? :: Hard, Soft
- What is the difference? :: Hard, defined by core agent, Soft defined by users/policy
- What are valid class characters? :: =[A-Za-z0-9_]=
- What is the default scope for classes defined as the result of a promise outcome using a classes body? :: *namespace* (globally accessible)
- What component serves policy files, which hosts can be a policy server? :: Files are served by ~cf-serverd~; any system /can/ be a policy server.
#+end_notes
* Variables & Data Types
:PROPERTIES:
:ID:       90852a3c-ff79-4bee-a71b-df6d9e13cc34
:END:

** Variable Scoping
:PROPERTIES:
:ID:       6e7ca748-f46a-4914-b512-cd626ee34165
:END:

- All variables are globally accessible
- =$(variable)=, =@(list or data container)=
- Use fully qualified variable names when accessing variables in other bundles.
  - =$(bundle.variable)=, =@(bundle.list)=
  - =$(namespace:bundle.variable)=, =@(namespace:bundle.list)=

** Datatypes
- string
- slist, ilist, rlist
- classic "array"
- data
*** Example - strings
:PROPERTIES:
:ID:       33870a0a-4fbd-4d3c-878c-e88bd9b47188
:END:
#+Caption: =examples/00-01-strings.cf=
#+Name: =examples/00-01-strings.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/00-01-strings.cf
bundle agent main
{
  vars:
   "string1" string => "one";
    "string2" string => "strings
can be multi-line";
    "string3" string => "with \"quotes\"";
    "string4" string => 'or "quotes"';
    "string5" string => `with 'single' and "double" quotes`;

  reports:
    "string1 = '$(string1)'";
    "string2 = '$(string2)'";
    "string3 = '$(string3)'";
    "string4 = '$(string4)'";
    "string5 = '$(string5)'";
}
#+END_SRC

#+CAPTION: Speaker Notes
#+begin_notes
Notice: single quotes (='=), doublequotes (="=), and backticks (=`=) can be interpolated when you want to include them within a string.
#+end_notes

#+REVEAL: split

#+Caption: =examples/00-01-strings.cf= output
#+RESULTS: =examples/00-01-strings.cf=
: R: string1 = 'one'
: R: string2 = 'strings
: can be multi-line'
: R: string3 = 'with "quotes"'
: R: string4 = 'or "quotes"'
: R: string5 = 'with 'single' and "double" quotes'

*** Example - numbers
:PROPERTIES:
:ID:       01d51493-c97f-4804-b3e7-3c448222d8f5
:END:
#+Caption: =examples/00-02-numbers.cf=
#+Name: =examples/00-02-numbers.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/00-02-numbers.cf
bundle agent main
{
  vars:
    "var1" int => "1";
    "var2" int => "10K";
    "var3" real => "1.2";
    "var4" real => "10e-5";
    "var5" int => "inf";

  reports:
    "var1 = '$(var1)'";
    "var2 = '$(var2)'";
    "var3 = '$(var3)'";
    "var4 = '$(var4)'";
    "inf = '$(var5)'";
}
#+END_SRC

#+CAPTION: Speaker Notes
#+begin_notes
Integers may use suffixes to represent large numbers. The following suffixes can
be used to create integer values for common powers of 1000.

- =k= :: value times 1000
- =m= :: value times 1000^2
- =g= :: value times 1000^3

Since computing systems such as storage and memory are based on binary values,
CFEngine also provide the following uppercase suffixes to create integer
values for common powers of 1024.

- =K= :: value times 1024
- =M= :: value times 1024^2
- =G= :: value times 1024^3

However, the values must have an integer numeric part (e.g. 1.5M is not
allowed).

In some contexts, =%= can be used a special suffix to denote percentages.

Lastly, there is a reserved value which can be used to specific a parameter as
having no limit at all.

- =inf= :: a constant representing an "unlimited", value.
#+end_notes

#+REVEAL: split

#+RESULTS: =examples/00-02-numbers.cf=
: R: var1 = '1'
: R: var2 = '10240'
: R: var3 = '1.200000'
: R: var4 = '0.000100'
: R: inf = '999999999'

*** Example - lists
:PROPERTIES:
:ID:       476782d9-3e3f-415b-bbc1-b0a010f31663
:END:
#+Caption: =examples/00-04-lists.cf=
#+Name: =examples/00-04-lists.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/00-04-lists.cf
bundle agent main
{
  vars:
    "var1" ilist => { 1, 2, "3", "4" };
    "var2" rlist => { "1.2", "2.0", "3.3" };
    "var3" slist => { "one", "two", three,
                      @(var1), @(var2),
                    };
    "var4" real => sum( var2 );

  reports:
    "var1 = '$(var1)'";
    "var2 = '$(var2)'";
    "var3 = '$(var3)'";
    "var4 = '$(var4)'";
}
#+END_SRC

#+CAPTION: Speaker Notes
#+begin_notes
If you refer to a list variable as a scalar (=$(var)=), CFEngine interprets it to mean /iterate over all the values in the list/.
#+end_notes

#+REVEAL: split

#+RESULTS: =examples/00-04-lists.cf=
#+begin_example
R: var1 = '1'
R: var1 = '2'
R: var1 = '3'
R: var1 = '4'
R: var2 = '1.2'
R: var2 = '2.0'
R: var2 = '3.3'
R: var3 = 'one'
R: var3 = 'two'
R: var3 = 'three'
R: var3 = '1'
R: var3 = '2'
R: var3 = '3'
R: var3 = '4'
R: var3 = '1.2'
R: var3 = '2.0'
R: var3 = '3.3'
R: var4 = '6.500000'
#+end_example

*** Example - list iteration (loops)
:PROPERTIES:
:ID:       d9be1dbe-d799-4da1-8968-ee3f2b044cf5
:END:
#+Caption: =examples/00-03-list_iteration.cf=
#+Name: =examples/00-03-list_iteration.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/00-03-list_iteration.cf
bundle agent main
{
  vars:
    "numbers" slist => { "1", "2", "3" };
    "colors" slist => { "red", "green", "blue" };

  reports:
    "$(numbers)";
    "$(colors)";
    "$(numbers) with $(colors)";
    "$(colors) with $(numbers)";
}
#+END_SRC

#+REVEAL: split

#+RESULTS: =examples/00-03-list_iteration.cf=
#+begin_example
R: 1
R: 2
R: 3
R: red
R: green
R: blue
R: 1 with red
R: 1 with green
R: 1 with blue
R: 2 with red
R: 2 with green
R: 2 with blue
R: 3 with red
R: 3 with green
R: 3 with blue
R: red with 1
R: red with 2
R: red with 3
R: green with 1
R: green with 2
R: green with 3
R: blue with 1
R: blue with 2
R: blue with 3
#+end_example

*** Example - "Classic" Arrays
:PROPERTIES:
:ID:       23a3bc95-8da5-4047-ba69-87922734bbbf
:END:

#+Caption: =examples/00-05-classic_arrays.cf=
#+Name: =examples/00-05-classic_arrays.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/00-05-classic_arrays.cf
bundle agent main
{
  vars:
    "file[motd]"  string => "/etc/motd";
    "file[fstab]" string => "/etc/fstab";

    "file_idx" slist => getindices( file );
    "files" slist => getvalues( file );

  reports:
   "The key '$(file_idx)' has the value '$(file[$(file_idx)])'";
   "file: '$(files)'";
}
#+END_SRC

#+REVEAL: split

#+RESULTS: =examples/00-05-classic_arrays.cf=
: R: The key 'motd' has the value '/etc/motd'
: R: The key 'fstab' has the value '/etc/fstab'
: R: file: '/etc/motd'
: R: file: '/etc/fstab'

*** Example - data containers
#+Caption: =examples/00-06-data_containers.cf=
#+Name: =examples/00-06-data_containers.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/00-06-data_containers.cf
bundle agent main
{
  vars:
    "server" string => "mirror.int.cfengine.com";
    "repos"
      data => parsejson('{
                "rhel6_updates": {
                  "id": { "value":"RHEL6_UPDATES" },
                  "name": { "value": "RHEL 6.x Updates" },
                  "baseurl": { "value": "https://$(server)/RHEL6/updates" }
                }
              }');

    "idx" slist => getindices( repos );

  reports:
    "URL = '$(repos[$(idx)][baseurl][value])'";
}
#+END_SRC

#+REVEAL: split

#+RESULTS: =examples/00-06-data_containers.cf=
#+BEGIN_EXAMPLE
R: URL = 'https://mirror.int.cfengine.com/RHEL6/updates'
#+END_EXAMPLE

*** Differences between "Classic Arrays" and "Data containers" 
#+CAPTURE: Speaker Notes
#+begin_notes
- Data containers are defined as a single entity
- Arrays are defined by each index
- "Classic arrays" are cleared at the start of each bundle evaluation

- Arrays are a collection of related variables
- Data containers are a single variable
#+end_notes

#+Name: =examples/00-04-classicarray-vs-datacontainer.cf=
#+Caption: =examples/00-04-classicarray-vs-datacontainer.cf=
#+BEGIN_SRC cfengine3 :tangle ./examples/00-04-classicarray-vs-datacontainer.cf
  bundle agent main
  {
    vars:
        "ClassicArray[key]" string => "value";
        "ClassicArray[deep]" slist => { "list" };
        "DataContainer"
          data => '{ "key": "value", "deep": [ "list" ] }';

    reports:
        "ClassicArray:$(with)"
          with => string_mustache( "{{%-top-}}", ClassicArray);
        "DataContainer:$(with)"
          with => string_mustache( "{{%-top-}}", DataContainer);
  }
#+END_SRC

#+REVEAL: split

#+RESULTS: =examples/00-04-classicarray-vs-datacontainer.cf=
#+begin_example
R: ClassicArray:{
  "deep": [
    "list"
  ],
  "key": "value"
}
R: DataContainer:{
  "deep": [
    "list"
  ],
  "key": "value"
}
#+end_example

** Pop Quiz
:PROPERTIES:
:ID:       7f27eca0-1121-4c25-bfb3-b5e0cdd3de46
:END:

#+ATTR_REVEAL: :frag roll-in
- Which component makes changes to your system?

#+ATTR_REVEAL: :frag roll-in
- Which component schedules agent runs?

#+ATTR_REVEAL: :frag roll-in
- What symbol terminates a promise?

#+ATTR_REVEAL: :frag roll-in
    - [[file:images/What is your quest - To seek the Holy Grail.mp4][What is your quest?]]
 
#+ATTR_REVEAL: :frag roll-in
- What are promise comments used for?

#+ATTR_REVEAL: :frag roll-in
- What types of variables are available?

#+ATTR_REVEAL: :frag roll-in
- How are decisions made?

#+CAPTION: Speaker Notes
#+begin_notes
- Which component makes changes to your system? :: ~cf-agent~
- Which component schedules agent runs? :: ~cf-execd~
- What symbol terminates a promise? :: semicolon (=;=)
- What is your quest? :: *To seek the Holy Grail!*
- What are promise comments used for? :: To document *why* a promise is important.
- What types of variables are available? :: list, string, int, real, data
- How are decisions made? :: Using classes and class expressions
#+end_notes
* Policy Examples
:PROPERTIES:
:ID:       190c0079-5336-4e03-8ea4-c71a2cfa684f
:END:

#+CAPTION: Speaker Notes
#+begin_notes
  For convenience in working with examples we will use the [autorun]() feature
  from the masterfiles policy framework.

  - Autorun bundles are executed in lexical order. Use digit prefixes to get
    specific ordering.
#+end_notes

** Enable services_autorun
:PROPERTIES:
:ID:       94b248ac-68df-4677-b03c-9149d3a548df
:END:
#+BEGIN_EXAMPLE
  [root@hub masterfiles]# cat > def.json <<EOF
  {
      "classes": {
          "cfengine_internal_masterfiles_update": [
              "policy_server"
          ],
          "services_autorun": [ "any" ]
      }
  }
  EOF
#+END_EXAMPLE

** Create a file
:PROPERTIES:
:ID:       9cb68439-c70c-4fe1-be2c-176fdf328588
:END:

Copy this example to =services/autorun/nologin.cf=

#+Name: =examples/00-20-example-create_file.cf=
#+Caption: =examples/00-20-example-create_file.cf=
#+begin_src cfengine3 :tangle examples/00-20-example-create_file.cf :bundlesequence nologin
bundle agent nologin
{
  files:
     "/tmp/nologin"
        create => "true",
        classes => results("bundle", "my_file");

   reports:
    my_file_repaired::
     "File repaired";

     any:: 
      "File Exists"
        if => fileexists("/tmp/nologin");
}
#+END_SRC

#+RESULTS: =examples/00-20-example-create_file.cf=
: R: File repaired
: R: File Exists

** Update file
:PROPERTIES:
:ID:       6c117f0e-2e5a-44e3-9119-4ea9568ab8c3
:END:

#+Name: =examples/00-20-example-update_file.cf=
#+Caption: =examples/00-20-example-update_file.cf=
#+BEGIN_SRC cfengine3 :define DEBUG :command-in-result-t :tangle examples/00-20-example-update_file.cf
bundle agent main
{
  meta:
    "tags" slist => { "autorun" };

  files:
    "$(sys.statedir)/$(this.bundle)" -> { "Monitoring" }
      create  => "true",
      touch   => "true",
      classes => scoped_classes_generic("bundle", "heartbeat"),
      handle  => "cf_agent_heartbeat_thump",
      comment => "This policy simply updates the timestamp
                  of the file so an external monitoring
                  system can validate the system is working.";

  reports:
    DEBUG|DEBUG_cf_agent_heartbeat::

      "DEBUG $(this.bundle): Heartbeat"
        if => "heartbeat_repaired";

      "DEBUG $(this.bundle): Flatline"
        unless => "heartbeat_repaired";
}
#+END_SRC

#+RESULTS: =examples/00-20-example-update_file.cf=
: R: DEBUG main: Heartbeat


** Install a package and start a service
:PROPERTIES:
:ID:       aa3065ea-f167-4b8a-9fde-f07ca8677429
:END:

#+Caption: =examples/00-20-example-package_and_service.cf=
#+BEGIN_SRC cfengine3
bundle agent main
{
  vars:
      "config[driftfile]" string => "/var/lib/ntp/drift";

  packages:
      "ntp" policy => "present";

  services:
      "ntpd" service_policy => "start";

       "ntpd"
        service_policy => "restart",
        if => "ntpd_conf_repaired";

  files:
      "/etc/ntp.conf"
        edit_line => set_line_based("$(this.bundle).config", # Key Values 
                                    " ",        # Separator
                                    "\s+",      # Separator regex
                                    ".*",       # Keys to use
                                    "\s*#\s*"), # Ignore lines
        classes => results("bundle", "httpd_conf");
}
#+END_SRC
** Classify role based on hostname
:PROPERTIES:
:ID:       b4f7b0a9-5839-4d1b-bbec-f12d6a68f282
:END:

#+Caption: =examples/00-20-example-classes-role_by_hostname.cf=
#+BEGIN_SRC cfengine3 :tangle examples/00-20-example-classes-role_by_hostname.cf
bundle common classes_role_by_hostname
{
  classes:
    "env_prod"
      meta => { "inventory", "attribute_name=Role Classes" };
      or => {
              regcmp( "hub", $(sys.fqhost) ),
              regcmp( "^prd.*", $(sys.fqhost) ),
            };

    "webserver"
      expression => "host001",
      meta => { "inventory", "attribute_name=Role Classes" };

    "webserver"
      expression => regcmp( "^www.*", $(sys.fqhost) ),
      meta => { "inventory", "attribute_name=Role Classes" };
}
#+END_SRC
** Classify geographic location by network
:PROPERTIES:
:ID:       fae34dc9-c6af-4bb2-9755-142af0f22d79
:END:

#+Caption: =examples/00-20-example-classes-geographic_location_by_network.cf=
#+BEGIN_SRC cfengine3
bundle common classify_geo_location_by_network
{
  meta:
    "tags" slist => { "autorun" };

  vars:
    "nadc01_subnets"
      slist => { "172.16.25.0/25", "172.17.0.0/16",
                 "192.168.33.2/32",
               };

    "nadc02_subnets"
      slist => { "172.17.5.0/25", "172.42.0.0/16",
                 "192.168.33.3/32",
               };

    "sadc01_subnets"
      slist => { "172.19.4.0/23", "192.168.33.4-5" };

    "continent"
      string => ifelse("north_america", "North America",
                       "south_america", "South America",
                       "Unknown"),
      meta => { "inventory", "attribute_name=Continent" };

#+END_SRC

#+REVEAL: split

#+Caption: Continued =examples/00-20-example-classes-geographic_location_by_network.cf=
#+BEGIN_SRC cfengine3

  classes:
    "north_america"
      or => { "nadc01", "nadc02" };

    "south_america"
      expression => classmatch("^sadc\d+");

    "nadc01"
      expression => iprange( $(nadc01_subnets) );

    "nadc02"
      expression => iprange( $(nadc02_subnets) );

    "sadc01"
      expression => iprange( $(sadc01_subnets) );

  reports:
    "DEBUG|DEBUG_$(this.bundle)"::
      "DEBUG $(this.bundle): Continent = '$(continent)'";
}
#+END_SRC
** Manage key value entries in a config file
:PROPERTIES:
:ID:       61e9705e-9cec-49f1-89cb-31322c34a17c
:END:

#+Caption: =manage_ssh= in =examples/00-20-example-key_value_config.cf=
#+BEGIN_SRC cfengine3 :tangle examples/00-20-example-key_value_config.cf 
bundle agent manage_ssh
{
  meta:
    "tags" slist => { "autorun" };

  methods:
    "SSH Config Data"
      usebundle => ssh_config;

    "Manage SSH Config"
      usebundle => ssh_config_manage_kv("ssh_config.data");
}
#+END_SRC

#+REVEAL: split

#+Caption: =ssh_config= in =examples/00-20-example-key_value_config.cf=
#+BEGIN_SRC cfengine3 :tangle examples/00-20-example-key_value_config.cf  :include-stdlib nil
bundle agent ssh_config
{
  vars:
      "data[PermitRootLogin]" string => "no";
      "data[Protocol]" string => "2";
      "data[Port]" string => "22";

    DEBUG|DEBUG_ssh_config::
      "keys" slist => getindices(data);

  reports:
    DEBUG|DEBUG_ssh_config::
      "DEBUG $(this.bundle): $(keys) = '$(data[$(keys)])'";
}
#+END_SRC

#+REVEAL: split

#+Caption: =ssh_config_manage_kv= in =examples/00-20-example-key_value_config.cf=
#+BEGIN_SRC cfengine3
bundle agent ssh_config_manage_kv(data)
{
  vars:
    "config" string => "/etc/ssh/sshd_config";

  files:
    "$(config)"
      handle => "ssh_config_manage_kv_entries",
      edit_line => set_line_based("$(data)", " ", "\s+", ".*", "\s*#\s*"),
      classes => scoped_classes_generic("bundle", "sshd_config");

  classes:
    sshd_config_repaired::
      "config_valid"
        expression => returnszero("/usr/sbin/sshd -t -f $(config)", noshell),
        comment => "It's important that we don't restart the service with a
                    broken config, or the service will be down.";

  commands:
    sshd_config_repaired.config_valid::
      "$(paths.service)"
        handle => "ssh_config_manage_kv_restart_after_config_change",
        args => "sshd restart",
        comment => "The service must be restarted in order to pick up new
                    configuration settings.";

  reports:
      "DEBUG $(this.bundle): Reparied configuration"
        if => "sshd_config_repaired";

      "DEBUG $(this.bundle): Configuration Valid"
        if => "config_valid";

      "DEBUG $(this.bundle): Restarted sshd after config change"
        depends_on => { "ssh_config_manage_kv_restart_after_config_change" };
}
#+END_SRC

#+REVEAL: split

#+BEGIN_EXAMPLE
  [root@hub masterfiles]# cf-agent -KID DEBUG_ssh_config,DEBUG_ssh_config_manage_kv
      info: Installing cfe_internal_non_existing_package...
  R: DEBUG ssh_config: PermitRootLogin = 'no'
  R: DEBUG ssh_config: Protocol = '2'
  R: DEBUG ssh_config: Port = '22'
      info: Edit file '/etc/ssh/sshd_config'
  R: DEBUG ssh_config_manage_kv: Reparied configuration
      info: Executing 'no timeout' ... '/sbin/service sshd restart'
    notice: Q: "...in/service sshd": Stopping sshd:          [  OK  ]
  Q: "...in/service sshd": Starting sshd:                    [  OK  ]
      info: Last 2 quoted lines were generated by promiser '/sbin/service sshd restart'
      info: Completed execution of '/sbin/service sshd restart'
  R: DEBUG ssh_config_manage_kv: Configuration Valid
  R: DEBUG ssh_config_manage_kv: Restarted sshd after config change
#+END_EXAMPLE

** Templating a file with mustache
:PROPERTIES:
:ID:       c2bc7d78-1a04-4439-9ee8-935999e0ef06
:END:

#+Caption: =examples/00-20-example-mustache_template_vars.cf=
#+BEGIN_SRC cfengine3 :tangle examples/00-20-example-mustache_template_vars.cf
bundle agent motd
{
  meta:
    "tags" slist => { "autorun" };

  vars:
    "owner" string => "Bruce Wayne";

  files:
    "/etc/motd"
      template_method => "inline_mustache",
      edit_template_string => 'Welcome to {{{vars.sys.fqhost}}}!

For support issues please contact {{{vars.motd.owner}}}.';
}
#+END_SRC

** Mustache extensions
- =-top-= data handed to the templating engine
- =@= Currently iterated /key/
- =%= Multi-line JSON representation of data
- =$= Serialized JSON representation of data

#+NAME: =examples/02-01-mustache-extensions.cf=
#+CAPTION: =examples/02-01-mustache-extensions.cf=
#+BEGIN_SRC cfengine3 :exports both :tangle examples/02-01-mustache-extensions.cf
bundle agent main
{
  vars: "d" data => '{ "key": "value", "list": ["one", "two"]}';
  reports:
    "Multiline: $(with)" with => string_mustache( "{{%-top-}}", d);
    "Serial: $(with)" with => string_mustache( "{{$-top-}}", d);
    "Keys: $(with)" with => string_mustache( "{{#-top-}}{{{@}}}, {{/top}}", d);
}
#+END_SRC

#+RESULTS: =examples/02-01-mustache-extensions.cf=
: R: Multiline: {
:   "key": "value",
:   "list": [
:     "one",
:     "two"
:   ]
: }
: R: Serial: {"key":"value","list":["one","two"]}
: R: Keys: key, list, 

** Inventory SSH Host Keys
:PROPERTIES:
:ID:       5de931a8-1b0d-48c7-a655-ed3c024eca17
:END:

#+NAME: examples/inventory-ssh-host-keys.cf
#+BEGIN_SRC cfengine3 :tangle examples/inventory-ssh-host-keys.cf
  bundle agent main
  {
    vars:
        "keys" slist => lsdir("/etc/ssh", "ssh_host_\w+_key", "false");
        "$(keys)"
          data => data_regextract("ssh_host_(?<type>\w+)_key", $(keys) );

        "type[$(keys)]"
          string => "$($(keys)[type])",
          meta => { "inventory", "attribute_name=SSH HostKey Type" };

        # Warning ssh-keygen output may vary across versions
        "fingerprint[$(keys)]"
          string => nth(
                         string_split(
                                       execresult("/usr/bin/ssh-keygen -l -f /etc/ssh/$(keys).pub",
                                                  noshell),
                                       "\s+", 5), 1),
          meta => { "inventory", "attribute_name=SSH HostKey Fingerprint" };

    reports:
        "/etc/ssh/$(keys).pub
          type: $($(keys)[type])
          fingerprint: $(fingerprint[$(keys)])";
  }
#+END_SRC

#+REVEAL: split

#+RESULTS: examples/inventory-ssh-host-keys.cf
#+begin_example
R: /etc/ssh/ssh_host_ed25519_key.pub
        type: ed25519
        fingerprint: SHA256:NA04HcvSPZ/wAp/vJUIcOV799ImTWnbFEX0R9R2SXUI
R: /etc/ssh/ssh_host_ecdsa_key.pub
        type: ecdsa
        fingerprint: SHA256:gN37F6qt7vkYvVzxgOii5hNzu7EPJw/yTvEnRtr+rLk
R: /etc/ssh/ssh_host_dsa_key.pub
        type: dsa
        fingerprint: SHA256:/5b5NncWQL43gi9AQarZvVoQW5M+LJxk8KqFYGvZpqI
R: /etc/ssh/ssh_host_rsa_key.pub
        type: rsa
        fingerprint: SHA256:tSRcjuKPF6W/jcyhqYG7tHlVkcrUZGh0RmwFEEpMPzc
#+end_example

* Policy Exercises
** Edit a file

Write a policy that populates =/etc/issue= with legaleze.

** Create local users

Write a policy that creates at least 2 users.

** Inventory the local users

Tag the variable(s) that contain the usernames you promised for /inventory/.

#+BEGIN_SRC cfengine3 :include-stdlib t :log-level info :exports both
   meta => { "inventory", "attribute_name=My users" } 
#+END_SRC

** Create a file

Write a policy that ensures =/etc/cron.allow= is populated with one of the previously created users allowed to have cron jobs.

Switch to a user and try to ~crontab -e~.

*** Possibility 0                                                :noexport:

#+BEGIN_SRC cfengine3 :include-stdlib t :log-level info :exports both
  bundle agnet main
  {
    vars: "file" string => "/etc/cron.allow";
   
   "$(file)"
     create => "true",
     edit_line => lines_present("nickanderson");
  }
#+END_SRC

*** Possibility 1                                                :noexport:

#+BEGIN_SRC cfengine3 :include-stdlib t :log-level info :exports both
  bundle agnet main
  {
    vars: "file" string => "/etc/cron.allow";
   
   "$(file)"
     create => "true",
     edit_line => lines_present("nickanderson");
     edit_line => insert_file("/tmp/users/txt");
  }
#+END_SRC

** Inventory users in /etc/cron.allow
Inventory the users listed in =/etc/cron.allow=
** Enable sshd banner

Write a policy that enables the ssh banner and directs it to =/etc/issue=. sshd
should be restarted after changing its configuration.

** Multiple outcomes
:PROPERTIES:
:ID:       7d3b755b-1313-430f-8e46-9c6d6ad8e281
:END:
#+Create immutable file
#+BEGIN_SRC sh
  touch /tmp/immutable
  sudo chattr +i /tmp/immutable
#+END_SRC

#+CAPTION: =examples/00-20-example-multiple_outcomes.cf=
#+BEGIN_SRC cfengine3 :include-stdlib t :log-level info :exports both :tangle examples/00-20-example-multiple_outcomes.cf
bundle agent main
{
  files:
    "/tmp/immutable"
      create => "true",
      edit_line =>  example_edit_line,
      classes => results("bundle", "my_id");

  vars:
    "classes" slist => classesmatching(".*my_id.*");

  reports:
    "Found Class = '$(classes)'";
}

bundle edit_line example_edit_line
{
  insert_lines:
    "I want to edit an immutable file";
}
#+END_SRC


#+RESULTS:
:    error: Can't copy file permissions from '/tmp/immutable' to '/tmp/immutable.cf-after-edit' - so promised edits could not be moved into place.
:    error: Unable to save file '/tmp/immutable' after editing
: R: Found Class = 'my_id_failed'
: R: Found Class = 'my_id_not_kept'
: R: Found Class = 'my_id_error'
: R: Found Class = 'my_id_kept'
: R: Found Class = 'my_id_reached'

Refer to [[https://docs.cfengine.com/docs/3.10/reference-masterfiles-policy-framework-lib-common.html#results][implementation of the =results= classes body]] in the stdlib.

#+Canup immutable file
#+BEGIN_SRC sh
sudo chattr -i /tmp/immutable
sudo rm /tmp/immutable
#+END_SRC

** Report
:PROPERTIES:
:ID:       3bfc2fab-ad7c-4092-8896-98d36d7b8aad
:END:

Write a policy that defines a name in separate parts (at least 3). Then have
CFEngine report the name in a random order.

*** Example solution
#+Caption: Example Solution
#+BEGIN_SRC cfengine3
bundle agent main
{
  vars:
    "name_parts" slist => { "Ronald", "Mck", "Donald" };
    "shuffled" slist => shuffle( name_parts, randomint(0, inf) );
    "name" string => join(" ", shuffled );

  reports:
    "$(name)";
}
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
R: Donald Mck Ronald
R: Donald Ronald Mck
R: Ronald Donald Mck
#+END_EXAMPLE

#+CAPTION: Speaker Notes
#+BEGIN_NOTES
  This solution will print the name multiple times, exposing normal order. Can you make it print just once?
#+END_NOTES
** Trigger an action when a file changes
:PROPERTIES:
:ID:       e0fb3d65-e3d8-4a1a-bc57-8338cc2e70f7
:END:

Write policy to monitor a file for change. When a change is seen report =Winner
Winner Chicken Dinner=. Manually edit the file, show how cfengine detects and
reports on the change.

** Automatically abort based on file presence
:PROPERTIES:
:ID:       8d8825af-14a4-418b-a5cd-4f9141c0ed22
:END:

Write a policy that will abort cfengine execution if the file
=$(sys.statedir)/abort_agent_execution= exists.

- See [[https://docs.cfengine.com/lts/reference-components-cf-agent.html#abortclasses][abortclasses]] in the cfengine documentation
** Delete file based on age
:PROPERTIES:
:ID:       b4ba2fd4-f546-49ed-aa97-3de9be1cc771
:END:

Write a policy that will delete =$(sys.statedir)/abort_agent_execution= if it is
older than 1 hour.
** Kill a process
:PROPERTIES:
:ID:       c1ae5f7c-ff93-4833-be0f-e58a5c6798f1
:END:

Write a policy to kill irssi running on webservers. No need for our webservers
to be connected to IRC.

#+BEGIN_EXAMPLE
  cp /bin/sleep /tmp/irssi
  /tmp/irssi 5000
#+END_EXAMPLE

* Enterprise Reporting
** APIs
- Host
- Inventory
- File Changes
- Health
- Query
- Settings
  - Federated Reporting
  - Import & Export
  - LDAP
  - Users
  - Version Control
  - RBAC

#+CAPTION: Speaker Notes
#+begin_notes
- Host API : query for basic host info based on classes reported or not
- Inventory: Query for /inventory/ attribute values, filter on classes reported
- File Changes:  Query high level statistics about changes observed
- Health: Information about CFEngine's operation
- Query: SQL Queries
- Settings: Configure the Enterprise Hub
#+end_notes

** Host API

#+NAME: hostlist
#+BEGIN_SRC sh :results output :exports both :wrap "src json" :cached t
  curl -s -k --user $AUTHUSER:$PASSWORD \
    https://$HUB/api/host\?count\=2\&context-include\=cfengine_3_15_0

#+END_SRC


#+RESULTS: hostlist
#+begin_src json
{
  "data": [
    {
      "firstseen": "1578745699",
      "hostname": "host001.example.com",
      "id": "SHA=e01f65d069b9035c280ea0bdba6cf6e47863ac074a170addbad26e98cc89925c",
      "ip": "192.0.2.1",
      "lastreport": "1582643957"
    },
    {
      "firstseen": "1578745692",
      "hostname": "hub.example.com",
      "id": "SHA=70138d580b9fd292ff856746df2fe7f9ded29db9ffca0c4d83acbbb97cde4d42",
      "ip": "104.236.18.209",
      "lastreport": "1582643974"
    }
  ],
  "meta": {
    "count": 2,
    "page": 1,
    "timestamp": 1582644064,
    "total": 7
  }
}
#+end_src

** Inventory API
*** Inventory API attributes

#+BEGIN_SRC sh :results output :exports code
  curl -q -k --user $AUTHUSER:$PASSWORD \
    -X GET \
    https://$HUB/api/inventory/attributes-dictionary | \
    jq 'map(.attribute_name)[]'
#+END_SRC

*** Inventory API Query
#+NAME: inventory
#+BEGIN_SRC sh :results output :exports both
  curl -q -k --user $AUTHUSER:$PASSWORD \
    -X POST \
    https://$HUB/api/inventory \
    -H 'content-type: application/json' \
    -d '{
          "sort":"Host name",
          "select":[
             "Host name",
             "OS",
             "Policy Release Id",
             "IPv4 addresses",
             "CFEngine version",
             "Ports listening"
          ],
          "hostContextInclude":[
             "coreos"
          ]
        }
  '
#+END_SRC

** Health API

#+CAPTION: Get an overview of the health status
#+BEGIN_SRC sh :results output :exports code
  curl -s -k --user $AUTHUSER:$PASSWORD \
    -X GET \
    https://$HUB/api/inventory/attributes-dictionary | jq'
#+END_SRC


#+BEGIN_SRC json
{
  "hostsNeverCollected": 0,
  "notRecentlyCollected": 3,
  "hostsUsingSameIdentity": 0,
  "agentNotRunRecently": 0,
  "lastAgentRunUnsuccessful": 0,
  "totalFailed": 3,
  "total": "8"
}
#+END_SRC

#+CAPTION: Speaker Notes
#+BEGIN_NOTES
- Get an overview of the health status
- Query for details of each health status
#+END_NOTES

** Query API

#+CAPTION: Speaker Notes
#+BEGIN_NOTES
- Make complex SQL queries
- Make Asynchronous SQL Queries (for long running queries)
#+END_NOTES


#+BEGIN_SRC sh :results output :exports both
  curl -q -k --user $AUTHUSER:$PASSWORD \
    -X POST \
    https://$HUB/api/query \
    -H 'content-type: application/json' \
    -d '{
          "query": "select hostname, ipaddress from hosts",
          "limit": 2,
          "hostContextExclude": ["policy_server"]
       }'
#+END_SRC

*** Base64 encoded query links
#+CAPTION: Speaker Notes
#+BEGIN_NOTES
- An alternative to "Saved Reports"
#+END_NOTES

(the following example doesn't fit on the page in the PDF)
#+BEGIN_SRC sh
  HUB_URL="https://hub"
  API="/index.php/advancedreports/#/report/run?sql="
  SQL_QUERY="SELECT Hosts.HostName AS 'Host Name' FROM Hosts"
  REPORT_TITLE="Example Report"
  LINK="${HUB_URL}${API}$(echo ${SQL_QUERY} | base64)&title=$(/usr/bin/urlencode ${REPORT_TITLE})"
  echo "${LINK}"
#+END_SRC

* Special Topics
** Internal agent upgrade mechanism

(the following doesn't fit on the page in the PDF)
- Place agent packages in
  =/var/cfengine/master_software_updates/$(sys.flavour)_$(sys.arch)=
- Define =trigger_upgrade= for set of hosts. Ref =update_def.cf=
  #+BEGIN_SRC cfengine3
  classes:
    "trigger_upgrade" or => { "host1", "host2", "redhat_5" }; 
  #+END_SRC

#+CAPTION: Speaker Notes
#+begin_notes
  The MPF comes with policy that allows for clients to upgrade their own
  packages that are served from the hub.
#+end_notes
** Data transformations

*** Re-parent a data structure

With =mergedata()= it is possible to wrap data containers inside of a new JSON
data structure in the current namespace.

For example, here we take an array of objects describing content for pghba.conf
file and re-parent it under the pghba key in a new data-structure.

#+BEGIN_SRC cfengine3
  bundle agent main
  {
      vars:
        "pghba_directives" data => '[
    {
      "type": "host",
      "database": "replication",
      "user": "all",
      "address": "secondary-replication",
      "method": "trust"
    }
  ]';

        "data" data => mergedata( '{ "pghba": pghba_directives }');


    reports:
        "$(with)" with => string_mustache( "{{%-top-}}", data);

  }
#+END_SRC

#+RESULTS:
#+begin_example
R: {
  "pghba": [
    {
      "address": "secondary-replication",
      "database": "replication",
      "method": "trust",
      "type": "host",
      "user": "all"
    }
  ]
}
#+end_example
* Useful Tools and Tips
:PROPERTIES:
:ID:       1b3901a6-ecaa-4da9-8f05-133827bb92bb
:END:
** Syntax Checking
:PROPERTIES:
:ID:       78de2122-05f5-4ebe-bce5-1c616e22faf3
:END:

#+Caption: Full Syntax Check
#+BEGIN_SRC shell
cf-promises --eval-functions=yes --full-check \
  -f ./examples/00-01-hello_world.cf
#+END_SRC

- Full check requires =body common control= (or =bundle agent main=). Typically this is only used when you run cf-promsies against =promises.cf=, =update.cf=, or =standalone_self_upgrade.cf=

#+REVEAL: split

#+Caption: Partial Syntax Check
#+BEGIN_SRC shell
cf-promises -f ./examples/00-01-hello_world.cf
#+END_SRC

Build into your workflow!
- Editors
- vcs hooks
- build systems

#+CAPTION: Speaker Notes
#+begin_notes
  # TODO move this slide? body common control not introduced?

  Its typical to wire full policy syntax checks into pre-commit hooks or have
  them run by a continuous integration system like Jenkins.

  Partial checks are useful to run while developing policy, and depending on the
  editor, you may be able to do this as a save hook.
#+end_notes

** =noshell= vs =useshell= for =commands= type promises, =execresult()=, and =returnszero()=

#+CAPTION: Speaker Notes
#+begin_notes
As a general rule of thumb I prefer to use =noshell=. I try to only =useshell=
if it's required. Running a command with a shell requires more resources.
However using a shell does provide some additional functionality.

Additionally as a general rule you should not be making changes to the system
using =execresult()= or =returnszero()=. The functions are intended to be used
for discovery. As with most rules, there are times when it would make sense to
run a script that changes the system from one of these functions, but I can't
think of any off the top of my head.
#+end_notes

- =useshell= allows you to use pipelines

(the following example doesn't fit on the page in the PDF)
#+BEGIN_SRC cfengine3
bundle agent main
{

  vars:
      "result_with_shell"
        string => execresult( "/bin/echo 'Hello$(const.n) World' | grep Hello", useshell);

    reports:
      "$(result_with_shell)";
}
#+END_SRC

#+RESULTS:
: R: Hello

#+REVEAL: split

- =useshell= allows you to redirect output

(the following example doesn't fit on the page in the PDF)
#+BEGIN_SRC cfengine3
bundle agent main
{

  classes:

      "successfully_executed"
        expression => returnszero( "/bin/echo 'Hello$(const.n) World' | grep -i world > $(this.promise_filename).out ", useshell);

    reports:
      successfully_executed::
      "Successfully Executed";
      "Grep found: "
        printfile => cat( "$(this.promise_filename).out" );
}
#+END_SRC

#+RESULTS:
: R: Successfully Executed
: R: Grep found: 
: R:  World

#+REVEAL: split

- =useshell= allows you to use unqualified commands

(the following example doesn't fit on the page in the PDF)
#+BEGIN_SRC cfengine3
bundle agent main
{

    vars:

      # Note that echo is not fully qualified. That's because it picked it up
      # from the shells PATH

      "result"
        string => execresult( "echo 'Hello World'", useshell);

    reports:
      "Result: $(result)";
}
#+END_SRC

#+RESULTS:
: R: Result: Hello World
** ~cf-remote~

- https://github.com/cfengine/core/tree/master/contrib/cf-remote

#+Caption: Install and bootstrap remote hosts
#+BEGIN_SRC shell
  cf-remote install --hub 34.252.28.73 --bootstrap 172.31.30.237
#+END_SRC
** ~cf-locate~
:PROPERTIES:
:ID:       aa03c0a5-ec8b-472f-bf96-c15c1227f8aa
:END:

- =cf-locate= :: Command line tool to help locate and optionally display a body
     or bundle within a policy

#+CAPTION: Speaker Notes
#+begin_notes
  Ever read a policy and see a body that you want to understand more?
  
  Try it with ~cf-locate scoped_classes_generic -f /path_to_masterfiles~
#+end_notes

** Debug Reports
:PROPERTIES:
:ID:       a5a29f9c-1a23-4249-b21c-4644fdbe6172
:END:

Use standardized =DEBUG= reports for policy development and troubleshooting.

#+BEGIN_SRC cfengine3
bundle agent main
{
  reports:
    DEBUG|DEBUG_this_bundle_name::
      "DEBUG $(this.bundle): ....";
    "DEBUG|DEBUG_$(this.bundle)"::
      "DEBUG $(this.bundle): ....";
 }
#+END_SRC

** Promise comments
:PROPERTIES:
:ID:       d3a98695-f6a2-409f-9530-03530d6cb58c
:END:

Use promise comments to document *WHY* the promise is important.

#+BEGIN_SRC cfengine3
bundle agent main
{
  services:
    "firewalld"
      policy => "start",
      comment => "If this service isnt running, then we have unnecessary
                  exposure and increase our risk of a security breach.";
}
#+END_SRC

** Getting the most from the documentation
:PROPERTIES:
:ID:       7d8d9121-6468-4bed-b1c7-9ff1082476ee
:END:
** ~jq~
#+CAPTION: Speaker Notes
#+begin_notes
- sed and awk for JSON
#+end_notes

#+NAME: json
#+begin_src sh :wrap "src json" :exports output :results output
echo '{
  "data": [
    {
      "firstseen": "1578745699",
      "hostname": "host001.example.com",
      "id": "SHA=e01f65d069b9035c280ea0bdba6cf6e47863ac074a170addbad26e98cc89925c",
      "ip": "192.0.2.2",
      "lastreport": "1582643957"
    },
    {
      "firstseen": "1578745692",
      "hostname": "hub.example.com",
      "id": "SHA=70138d580b9fd292ff856746df2fe7f9ded29db9ffca0c4d83acbbb97cde4d42",
      "ip": "192.0.2.1",
      "lastreport": "1582643974"
    }
  ],
  "meta": {
    "count": 2,
    "page": 1,
    "timestamp": 1582644064,
    "total": 7
  }
}'
#+end_src

#+RESULTS: json
#+begin_src json
{
  "data": [
    {
      "firstseen": "1578745699",
      "hostname": "host001.example.com",
      "id": "SHA=e01f65d069b9035c280ea0bdba6cf6e47863ac074a170addbad26e98cc89925c",
      "ip": "192.0.2.1",
      "lastreport": "1582643957"
    },
    {
      "firstseen": "1578745692",
      "hostname": "hub.example.com",
      "id": "SHA=70138d580b9fd292ff856746df2fe7f9ded29db9ffca0c4d83acbbb97cde4d42",
      "ip": "104.236.18.209",
      "lastreport": "1582643974"
    }
  ],
  "meta": {
    "count": 2,
    "page": 1,
    "timestamp": 1582644064,
    "total": 7
  }
}
#+end_src

#+REVEAL: split

#+NAME: comma-seperated-list-of-ips-from-hostlist
#+CAPTION: Extract a list of IPs from HOST API response
#+BEGIN_SRC sh :var INPUT=json :results output :wrap "src json" :exports both :cached t
  echo $INPUT  | jq '.data | map(.ip) | join(",")'
#+END_SRC

#+RESULTS: comma-seperated-list-of-ips-from-hostlist
#+begin_src json
192.0.2.2,192.0.2.1
#+end_src

** ~cf-runagent~

#+CAPTION: Run policy on all hosts reporting =not_rh_satellite_registered=
#+BEGIN_SRC sh :results output :exports both :cached t
  cf-runagent --background=3 --remote-bundles satellite_registration \
    -H $(curl -s -k --user $USER:$PASSWORD \
    https://$HUB/api/host\?count\=2\&context-include\=not_rh_satellite_registered |\
    jq '.data | map(.ip) | join(",")'|tr -d '"')
#+END_SRC

#+CAPTION: Speaker Notes
#+begin_notes
Note: The host where cf-runagent is executed from *must* already have trust established.
#+end_notes

* Additional Resources
:PROPERTIES:
:ID:       1f6c0380-eca8-4b00-a54d-33621f881e3f
:END:
- [[https://cf-learn.info/][Learning CFEngine]] :: Widely considered best book to get a good grounding in CFEngine.
- [[http://www.cfenginetutorial.org/][CFEngine Tutorial]] :: Training material published by Aleksey Tsalolikhin from Vertical Sysadmin, one of our partners.
- [[https://www.cfenginetutorial.org][VSA Training Material]] :: Self paced in depth tutorial based on Vertical Sysadmin training coursework
- [[https://github.com/nickanderson/example-a10042][Example Policy Layout]] :: An example policy layout
- [[https://github.com/syl20bnr/spacemacs/tree/master/layers/%252Btools/cfengine][CFEngine Spacemacs Layer]] :: The best editor is neither Emacs nor Vim, it's Emacs and Vim!
- [[https://github.com/cfengine/core/tree/master/contrib/cf-locate][=cf-locate=]] :: Find and optionally display body and bundle definitions within a policy set
- [[https://docs.cfengine.com/docs/3.15/guide-writing-and-serving-policy-policy-style.html][Policy Style Guide]] :: Write policy in a common style. Make it easier for others to quickly digest your policy.

#+REVEAL: split

- [[https://github.com/cfengineers-net/cf-keycrypt][=cf-keycrypt=]] :: Tool to encrypt data with CFEngine public keys (in core as of 3.16.0)
  - Allows to encrypt data for individual hosts using the public key
  - Can be used with non host keys for "group" encryption
- [[http://www.cfengineers.net/downloads/cfengine-tools-and-utilities/][=cf-profile=]] :: Displays execution time summary for cf-agent run to find time consuming polices
- [[https://github.com/neilhwatson/vim_cf3][=vim_cf3=]] :: CFEngine 3 vim plugin with Syntax highlighting
- [[https://github.com/cfengine/core/blob/master/contrib/reindent.pl][=reindent.pl=]] :: Re-indent CFEngine policy using this script that leverages the excellent cfengine3 mode in Emacs
- [[https://github.com/naksu/cfengine_beautifier][Sublime Text 3 CFEngine Beautifier]] :: Automatically reformat CFEngine policy in Sublime Text
- [[https://github.com/lastops/sublime-cfengine][Sublime Text 3 Syntax Highlighter & Snippets]] :: CFEngine Syntax highlighting and snippets for Sublime Text 

#+REVEAL: split

- [[https://github.com/lpefferkorn/cfe-rsplaytime][=cfe-rsplaytime=]]  :: Compute splaytime for a given host
- [[https://github.com/lpefferkorn/cfe-profiler][=cfe-profiler=]] :: Measures bundle execution time helping to uncover the most time consuming bundles
- [[https://cfengine.com/cfengine-code-editors/][Editor support for CFEngine]] :: A list of editors with references for making working with cfengine syntax easier
- [[https://www.youtube.com/watch?v=zviHfjKz1nM&t=6s&list=PLh71Vl9YjMajsWxT8zQuRKEPwosG9HdzV&index=2][CFEngine in a Day]] :: Old, but still good 4 part video series ~ 5 hours of [[https://en.wikipedia.org/wiki/Mark_Burgess_(computer_scientist)][Mark Burgess]] (original author and founder) giving a one day training at [[https://www.surf.nl/en/about-surf/subsidiaries/surfsara/][SurfSara]]
- [[http://www.cfenginetutorial.org/][CFEngine Tutorial]] :: Training material published by Aleksey Tsalolikhin from Vertical Sysadmin, one of our partners.
- [[https://docs.cfengine.com/docs/3.12/guide-faq.html][General FAQs]] :: Frequently asked questions
- [[https://docs.cfengine.com/docs/3.12/enterprise-cfengine-guide-hub_administration.html][Hub Admin FAQ]] :: Frequently asked questions about CFEngine Enterprise Hub administration 

* Git Primer
:PROPERTIES:
:ID:       8980313e-65a6-4d8b-a616-3e77b77e059e
:END:

** Git
:PROPERTIES:
:ID:       60e8c549-6a49-4d10-8fdc-7943b8895b0f
:END:
Git is the most popular modern version control management tool. [[https://github.com][Github]],
[[https://bitbucket.org][Bitbucket]], and [[https://gitlab.com][GitLab]] all provide great hosted and on prem repository management
solutions.

Using a git management system is reccomended for implementing access controls
and improved collaboration with regard to policy and systems management.

#+CAPTION: Speaker Notes
#+begin_notes
  CFEngine Enterprise tooling works with git out of the box. If you don't want
  to use git the tooling is easily customized to support any version control
  system.
#+end_notes

** Getting started
:PROPERTIES:
:ID:       1c6d3b1e-9189-420c-a80b-4ed581eca528
:END:
Log into the policy server

#+BEGIN_EXAMPLE
  [user@workstation] $ vagrant ssh hub
  [vagrant@hub] $ sudo -i
#+END_EXAMPLE

Configure git author

(the following example doesn't fit on the page in the PDF)
#+BEGIN_EXAMPLE
  [root@hub masterfiles] # git config -–global user.name “Mr. Slate”
  [root@hub masterfiles] # git config -–global user.email “bossman@slateco.com”
  [root@hub masterfiles] # git config --global push.default simple
#+END_EXAMPLE

** Clone builtin repository
:PROPERTIES:
:ID:       0fc590cd-54a2-4b11-91e7-dc06653d12e0
:END:

(the following example doesn't fit on the page in the PDF)
#+BEGIN_EXAMPLE
  [root@hub masterfiles] # git clone /opt/cfengine/masterfiles.git /vagrant/masterfiles
  Cloning into '/vagrant/masterfiles'...
#+END_EXAMPLE

#+CAPTION: Speaker Notes
#+begin_notes
  When an Enterprise hub is installed, a git repository is seeded with the stock
  Masterfiles Policy Framework for that release. It provides an easy place to
  play around with git and get setarted.
#+end_notes

** Add a file to the repository
:PROPERTIES:
:ID:       dc014f99-e08c-4000-adb3-771a898428ed
:END:

(the following example doesn't fit on the page in the PDF)
#+BEGIN_EXAMPLE
  [root@hub masterfiles] # cd /vagrant/masterfiles
  [root@hub masterfiles] # ls
  cfe_internal  Changelog  controls  def.cf  lessons  lib  libraries  promises.cf  services  sketches  update  update.cf
  [root@hub masterfiles] # echo hi > file
  [root@hub masterfiles] # git status
  # On branch master
  # Untracked files:
  #   (use "git add <file>..." to include in what will be committed)
  #
  #	file
  nothing added to commit but untracked files present (use "git add" to track)
#+END_EXAMPLE

** Stage and commit the changes
:PROPERTIES:
:ID:       af76a43e-5f72-48d8-b41d-4651e789f6b6
:END:

#+BEGIN_EXAMPLE
  [root@hub masterfiles] # git add file
  [root@hub masterfiles] # git status
  # On branch master
  # Changes to be committed:
  #   (use "git reset HEAD <file>..." to unstage)
  #
  #	new file:   file
  #
  # git commit -m “Testing git workflow”
  [master c886caf] Testing git workflow
   0 files changed, 0 insertions(+), 0 deletions(-)
   create mode 100644 file
#+END_EXAMPLE

** Publish the change
:PROPERTIES:
:ID:       40a49bb0-202c-417f-bae6-af7fcf02b63a
:END:

#+BEGIN_EXAMPLE
  [root@hub masterfiles] # git status
  # On branch master
  # Your branch is ahead of 'origin/master' by 1 commit.
  #
  nothing to commit (working directory clean)
  [root@hub masterfiles] # git push
  Counting objects: 4, done.
  Delta compression using up to 2 threads.
  Compressing objects: 100% (2/2), done.
  Writing objects: 100% (3/3), 280 bytes, done.
  Total 3 (delta 1), reused 0 (delta 0)
  Unpacking objects: 100% (3/3), done.
  To /opt/cfengine/masterfiles.git
     ee31801..94b8151  master -> master
  # git status
  # On branch master
  nothing to commit (working directory clean)
#+END_EXAMPLE

** Modify a file
:PROPERTIES:
:ID:       f2e1db3c-e8d3-4383-b4cd-3ca30859f203
:END:

#+BEGIN_EXAMPLE
  [root@hub masterfiles] # echo HI >> file
  [root@hub masterfiles] # git status
  # On branch master
  # Your branch is ahead of 'origin/master' by 1 commit.
  #
  # Changed but not updated:
  #   (use "git add <file>..." to update what will be committed)
  #   (use "git checkout -- <file>..." to discard changes in working directory)
  #
  #	modified:   file
  #
  no changes added to commit (use "git add" and/or "git commit -a")
#+END_EXAMPLE

** Diff to validate detail of content change
:PROPERTIES:
:ID:       f21892a0-120f-4afb-b682-109d60993a61
:END:

#+BEGIN_EXAMPLE
    [root@hub masterfiles] # git diff
    diff --git a/file b/file
    index 45b983b..313352b 100644
    --- a/file
    +++ b/file
    @@ -1 +1,2 @@
     hi
    +HI
#+END_EXAMPLE

** Stage and commit the changes
:PROPERTIES:
:ID:       a9fa607f-a1d6-4c65-9f8d-63eff10b765d
:END:

#+BEGIN_EXAMPLE
  [root@hub masterfiles] # git add file
  [root@hub masterfiles] # git status
  # On branch master
  # Your branch is ahead of 'origin/master' by 1 commit.
  #
  # Changes to be committed:
  #   (use "git reset HEAD <file>..." to unstage)
  #
  #	modified:   file
  #
  # git commit -m "Modified file"
  [master fd94885] Modified file
   1 files changed, 1 insertions(+), 0 deletions(-)
  # git status
  # On branch master
  # Your branch is ahead of 'origin/master' by 1 commits.
  #
  nothing to commit (working directory clean)
#+END_EXAMPLE

** Publish the change
:PROPERTIES:
:ID:       749f73cb-553e-4356-a2ed-81d5b731ee51
:END:

#+BEGIN_EXAMPLE
  [root@hub masterfiles] # git push
  Counting objects: 7, done.
  Delta compression using up to 2 threads.
  Compressing objects: 100% (4/4), done.
  Writing objects: 100% (5/5), 493 bytes, done.
  Total 5 (delta 2), reused 0 (delta 0)
  Unpacking objects: 100% (5/5), done.
  To /opt/cfengine/masterfiles.git
     c886caf..fd94885  master -> master
#+END_EXAMPLE

** Remove a file
:PROPERTIES:
:ID:       90d60450-fbb2-4493-8b4e-d5dc7e2dc027
:END:

#+BEGIN_EXAMPLE
  [root@hub masterfiles] # git rm file
  # rm 'file'
  [root@hub masterfiles] # git status
  # On branch master
  # Changes to be committed:
  #   (use "git reset HEAD <file>..." to unstage)
  #
  #	deleted:    file
  #
  # git commit -m "Remove file"
  [master 4c9d46d] Remove file
   1 files changed, 0 insertions(+), 3 deletions(-)
   delete mode 100644 file
#+END_EXAMPLE

** Publish the change
:PROPERTIES:
:ID:       6e18b671-4717-46df-8fd6-f83909e4b811
:END:

#+BEGIN_EXAMPLE
  [root@hub masterfiles] # git push
  Counting objects: 3, done.
  Delta compression using up to 2 threads.
  Compressing objects: 100% (2/2), done.
  Writing objects: 100% (2/2), 230 bytes, done.
  Total 2 (delta 1), reused 0 (delta 0)
  Unpacking objects: 100% (2/2), done.
  To /opt/cfengine/masterfiles.git
     92660a9..4c9d46d  master -> master
#+END_EXAMPLE

** Place masterfiles into the repository
:PROPERTIES:
:ID:       6734a7c7-ac82-4b99-90c2-3490bffbdd9b
:END:

#+BEGIN_EXAMPLE
  [root@hub masterfiles] # rsync -avz /var/cfengine/masterfiles/ .
  [root@hub masterfiles] # git add -A
  [root@hub masterfiles] # git commit -m "Seed repository with masterfiles"
  [root@hub masterfiles] # git push
#+END_EXAMPLE

** Configure masterfiles for git integration
:PROPERTIES:
:ID:       2a44d62e-cfa3-4247-a762-9cb02431ed72
:END:

#+BEGIN_EXAMPLE
  [root@hub masterfiles]# echo '{ "classes": { "cfengine_internal_masterfiles_update": [ "policy_server" ] } }' > def.json
  [root@hub masterfiles]# git add def.json
  [root@hub masterfiles]# git commit -m "Enable automatic masterfiles update from repository"
  [master c206654] Enable automatic masterfiles update from repository
   1 file changed, 1 insertion(+)
   create mode 100644 def.json
  [root@hub masterfiles]# git push
  warning: push.default is unset; its implicit value is changing in
  Git 2.0 from 'matching' to 'simple'. To squelch this message
  and maintain the current behavior after the default changes, use:

    git config --global push.default matching

  To squelch this message and adopt the new behavior now, use:

    git config --global push.default simple

  See 'git help config' and search for 'push.default' for further information.
  (the 'simple' mode was introduced in Git 1.7.11. Use the similar mode
  'current' instead of 'simple' if you sometimes use older versions of Git)

  Counting objects: 4, done.
  Delta compression using up to 2 threads.
  Compressing objects: 100% (3/3), done.
  Writing objects: 100% (3/3), 370 bytes | 0 bytes/s, done.
  Total 3 (delta 1), reused 0 (delta 0)
  To /opt/cfengine/masterfiles.git
     a181449..c206654  master -> master
#+END_EXAMPLE

** Activate current update policy with enablement class
:PROPERTIES:
:ID:       c4897f12-c9e8-4f6c-860d-c033258c4c9f
:END:

#+BEGIN_EXAMPLE
  [root@hub masterfiles]# cf-agent --no-lock \
  --verbose \
  --define cfengine_internal_masterfiles_update \
  --file update.cf
#+END_EXAMPLE

** Verify presence of def.json
:PROPERTIES:
:ID:       458ad6fd-9f5d-4e6c-9284-d3bf1bd796f4
:END:

#+BEGIN_EXAMPLE
  [root@hub masterfiles]# cat /var/cfengine/masterfiles/def.json
#+END_EXAMPLE

#+CAPTION: Speaker Notes
#+begin_notes
  As you recall, we put the def.json into the repository not in
  =/var/cfengine/masterfiles= directly. We want to make sure that masterfiles is
  updating from our repository.
#+end_notes

** Review
:PROPERTIES:
:ID:       8b086174-7afd-4113-b50a-d77c60d7216d
:END:

Now when the agent runs on hosts that define =policy_server= policy will be
activated that keeps =/var/cfengine/masterfiles= up to date with whats in the
repository as configured in mission portal (which by default is
=/opt/cfengine/masterfiles.git=).

This means new policy will be distributed as you push it into the repository.
[[https://en.wikipedia.org/wiki/Continuous_delivery][Continuous delivery]] FTW!

** Git command reference
:PROPERTIES:
:ID:       aa7df660-daf8-4842-af4c-4a30ce5acc0b
:END:

| ~git status~        | ~git pull --rebase~           |
| ~git diff~          | ~git grep~                    |
| ~git add~           | ~git log~                     |
| ~git diff --cached~ | ~git checkout -b new_feature~ |
| ~git commit~        | ~git push origin <branch>~    |

** Pop Quiz
:PROPERTIES:
:ID:       cb545ca0-bfe9-4115-a52a-f46b101cef43
:END:

#+ATTR_REVEAL: :frag roll-in
- Who was Mr. Slate?

#+ATTR_REVEAL: :frag roll-in
- How do you get an overview of the changes to your clone?

#+ATTR_REVEAL: :frag roll-in
- How can you easily search a git repository?

#+CAPTION: Speaker Notes
#+begin_notes
- Who was Mr. Slate? :: Fred Flintstones Boss on The Flintstones
- How do you get an overview of the changes to your clone? :: ~git status~
- How can you easily search a git repository? :: ~git grep~
#+end_notes
